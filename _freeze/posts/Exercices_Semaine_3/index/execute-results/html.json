{
  "hash": "ece7bb36eb84183f783335ac436b9803",
  "result": {
    "markdown": "---\ntitle: \"Exercices - Semaine 3\"\nauthor: \"Marie Kerhoas\"\ndate: \"2024-03-08\"\ncategories: [Exercices, Athlètes, JO]\nimage: \"Sportifs.jpg\"\ncode-fold: true\nwarning: false\n---\n\n\n## Exercices - Semaine 3\n\nDans ce post vous trouverez la troisième série d'exercices sur R. Celle-ci est réalisée à partir d'une base de données SQL et de 2 fichiers comprenant des informations sur les athlètes olympiques.\n\n### Les librairies\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(arrow)\nlibrary(jsonlite)\nlibrary(RSQLite)\nlibrary(knitr)\n```\n:::\n\n\n### Question 1\n\nListez les fichiers présents dans le dossier data. Quelles sont les extensions des différents fichiers ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files(\"data/\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.sqlite\"            \"olympics_athletes.json\" \"tokyo_athletes.parquet\"\n```\n:::\n:::\n\n\nLes extensions des fichiers sont : .sqlite, .json et .parquet.\n\n### Question 2\n\nLisez le fichier .parquet en utilisant la librairie arrow.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntokyo_athletes <- arrow::read_parquet(\"data/tokyo_athletes.parquet\")\n```\n:::\n\n\nQuelles sont les dimensions de la table ? (lignes, colonnes)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(tokyo_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11085     3\n```\n:::\n:::\n\n\nQuelles sont les colonnes présentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(tokyo_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Name\"       \"NOC\"        \"Discipline\"\n```\n:::\n:::\n\n\n### Question 3\n\nLisez le fichier .json en utilisant la librairie jsonlite.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes <-\n  read_json(\"data/olympics_athletes.json\", simplifyVector = T)\n```\n:::\n\n\nQuelles sont les dimensions de la table ? (lignes, colonnes)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(olympics_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 269731     13\n```\n:::\n:::\n\n\nQuelles sont les colonnes présentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(olympics_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n```\n:::\n:::\n\n\n### Question 4\n\nImportez la librairie RSQLite, et ouvrez une connexion à la base de données sqlite en utilisant la fonction dbConnect.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- dbConnect(RSQLite::SQLite(), dbname = \"data/data.sqlite\")\n```\n:::\n\n\nQuelles sont les tables présentes dans la table ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListTables(con)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tokyo_medals\" \"tokyo_teams\" \n```\n:::\n:::\n\n\n### Question 5\n\nCréez deux nouvelles tables dans la base de données à l'aide de la fonction dbWriteTable. Les tables s'appeleront respectivement olympics_athletes et tokyo_athletes pour les fichiers olympics_athletes.json et tokyo_athletes.parquet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbWriteTable(con, \"tokyo_athletes\", tokyo_athletes)\ndbWriteTable(con, \"olympics_athletes\", olympics_athletes)\ndbListTables(con)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"olympics_athletes\" \"tokyo_athletes\"    \"tokyo_medals\"     \n[4] \"tokyo_teams\"      \n```\n:::\n:::\n\n\nDésormais 4 tables sont présentes dans la base de données.\n\n### Question 6\n\nInspectez la table olympics_athletes en utilisant la fonction dbListFields. Quelles sont les colonnes de la table ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListFields(con, \"olympics_athletes\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n```\n:::\n:::\n\n\n### Question 7\n\nImportez cette table depuis la base de données en utilisant la fonction dbReadTable. Convertissez la table en tibble en utilisant la fonction as_tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes <-\n  dbReadTable(con, \"olympics_athletes\") |> as_tibble()\n```\n:::\n\n\n### Question 8\n\nConvertissez la colonne Sex en variable catégorielle avec la fonction mutate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes <- olympics_athletes |>\n  mutate(Sex = recode(Sex, \"F\" = \"Femme\", \"M\" = \"Homme\"))\n\nstr(olympics_athletes$Sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:269731] \"Homme\" \"Homme\" \"Homme\" \"Homme\" \"Femme\" \"Femme\" \"Femme\" ...\n```\n:::\n:::\n\n\n### Question 9\n\nCréez deux colonnes à partir de la colonne Games. La première colonne Year sera une colonne de type integer contenant l'année des jeux. La deuxième colonne isSummer sera une colonne booléenne qui indiquera si les jeux sont des jeux d'été ou d'hiver.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes <- olympics_athletes |>\n  separate_wider_delim (Games, delim = \" \", names = c(\"Year\", \"isSummer\"))\n\nstr(olympics_athletes$Year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:269731] \"1992\" \"2012\" \"1920\" \"1900\" \"1988\" \"1988\" \"1992\" \"1992\" ...\n```\n:::\n\n```{.r .cell-code}\nstr(olympics_athletes$isSummer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:269731] \"Summer\" \"Summer\" \"Summer\" \"Summer\" \"Winter\" \"Winter\" ...\n```\n:::\n:::\n\n\n### Question 10\n\nCalculez la moyenne d'age des athletes pour chacune des éditions des JO d'été. Quelle édition a compté les athlètes les plus jeunes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes |> group_by(Year) |>\n  summarise(moyenne_age = mean(Age, na.rm = TRUE)) |>\n  arrange(moyenne_age) |>\n  mutate(moyenne_age = round(moyenne_age)) |> \n  head(n = 1) |> \n  kable()\n```\n\n::: {.cell-output-display}\n|Year | moyenne_age|\n|:----|-----------:|\n|1896 |          24|\n:::\n:::\n\n\nLes plus vieux ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes |> group_by(Year) |>\n  summarise(moyenne_age = mean(Age, na.rm = TRUE)) |>\n  arrange(desc(moyenne_age)) |>\n  mutate(moyenne_age = round(moyenne_age)) |> \n  head(n = 1) |> \n  kable()\n```\n\n::: {.cell-output-display}\n|Year | moyenne_age|\n|:----|-----------:|\n|1932 |          30|\n:::\n:::\n\n\n### Question 11\n\nQuelle est la discipline des JO d'été dont la taille des athlètes féminines est la plus grande ? (en cm)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes |> filter(Sex == \"Femme\", Height >= 0) |>\n  group_by(Sport) |>\n  summarise(max_taille = max(Height, na.rm = TRUE)) |>\n  arrange (desc(max_taille)) |>\n  head(n = 1) |> \n  kable()\n```\n\n::: {.cell-output-display}\n|Sport      | max_taille|\n|:----------|----------:|\n|Basketball |        213|\n:::\n:::\n\n\nQuelle a été cette discipline au cours de chacune des éditions ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes |>  filter(Sex == \"Femme\", Height >= 0) |>\n  group_by(Year) |>\n  summarise(max_taille = max(Height, na.rm = TRUE),\n            Sport = Sport[which.max(Height)]) |>\n  arrange(desc(Year)) |> \n  kable()\n```\n\n::: {.cell-output-display}\n|Year | max_taille|Sport      |\n|:----|----------:|:----------|\n|2016 |        203|Basketball |\n|2014 |        186|Ice Hockey |\n|2012 |        206|Basketball |\n|2010 |        194|Bobsleigh  |\n|2008 |        202|Volleyball |\n|2006 |        187|Bobsleigh  |\n|2004 |        202|Volleyball |\n|2002 |        187|Bobsleigh  |\n|2000 |        213|Basketball |\n|1998 |        187|Luge       |\n|1996 |        204|Basketball |\n|1994 |        187|Luge       |\n|1992 |        204|Basketball |\n|1988 |        204|Basketball |\n|1984 |        205|Basketball |\n|1980 |        210|Basketball |\n|1976 |        210|Basketball |\n|1972 |        190|Athletics  |\n|1968 |        188|Athletics  |\n|1964 |        188|Volleyball |\n|1960 |        186|Swimming   |\n|1956 |        185|Athletics  |\n|1952 |        188|Athletics  |\n|1948 |        180|Athletics  |\n|1936 |        183|Fencing    |\n|1932 |        183|Fencing    |\n|1928 |        183|Fencing    |\n|1924 |        175|Fencing    |\n|1920 |        175|Diving     |\n:::\n:::\n\n\nCalculez le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes |>  filter(Sex == \"Femme\", Height >= 0) |>\n  group_by(Year) |>\n  summarise(max_taille = max(Height, na.rm = TRUE),\n            Sport = Sport[which.max(Height)]) |>\n  group_by(Sport) |>\n  summarise(nb = n()) |>\n  arrange(desc(nb)) |> \n  kable()\n```\n\n::: {.cell-output-display}\n|Sport      | nb|\n|:----------|--:|\n|Basketball |  9|\n|Athletics  |  5|\n|Fencing    |  4|\n|Bobsleigh  |  3|\n|Volleyball |  3|\n|Luge       |  2|\n|Diving     |  1|\n|Ice Hockey |  1|\n|Swimming   |  1|\n:::\n:::\n\n\n### Question 12\n\nVous disposez du texte suivant : Les jeux olympiques d'été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde entier à Paris.\n\nEn utilisant les fonctions du packages stringr, extrayez les dates des différentes éditions des JO. Aide : définissez une expression régulière capable de capturer une séquence de caractères représentant une date telle que \"26 Juillet 2024\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntexte <-\n  \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois\nde Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016,\nceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du\n26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde\nentier à Paris.\"\n\ndates_JO <- str_extract_all(texte, \"\\\\d+ \\\\w+ \\\\d+\") |> unlist()\n```\n:::\n\n\n### Question 13\n\nRemplacez les noms des mois par leur numéro pour rendre ces éléments convertibles en date.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndates_JO[c(1, 2, 4, 6)] <-\n  str_replace(dates_JO[c(1, 2, 4, 6)], \"Août\", \"08\")\ndates_JO[c(3, 5)] <- str_replace(dates_JO[c(3, 5)], \"Juillet\", \"07\")\n\ndates_JO\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"5 08 2016\"  \"20 08 2016\" \"23 07 2021\" \"8 08 2021\"  \"26 07 2024\"\n[6] \"11 08 2024\"\n```\n:::\n:::\n\n\n### Question 14\n\nConvertissez ces 3 éléments en date en utilisant la fonction appropriée du package lubridate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDebut_2016 <- dmy(dates_JO[1]) \nFin_2016 <- dmy(dates_JO[2]) \n\nDebut_2021 <- dmy(dates_JO[3]) \nFin_2021 <- dmy(dates_JO[4]) \n\nDebut_2024 <- dmy(dates_JO[5])\nFin_2024 <- dmy(dates_JO[6])\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nDebut_2016\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2016-08-05\"\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nFin_2016\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2016-08-20\"\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nDebut_2021\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2021-07-23\"\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nFin_2021\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2021-08-08\"\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nDebut_2024 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2024-07-26\"\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nFin_2024\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2024-08-11\"\n```\n:::\n:::\n\n\n### Question 15\n\nCombien de jours ont séparés les éditions de Rio et Tokyo ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRio_Tokyo_d <- interval(Fin_2016, Debut_2021) |>\n  as.numeric(\"days\") |>\n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1798\n```\n:::\n:::\n\n\nEt sépareront les éditions de Tokyo et de Paris ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTokyo_Paris_d <- interval(Fin_2021, Debut_2024) |>\n  as.numeric(\"days\") |>\n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1083\n```\n:::\n:::\n\n\nFaites le même calcul en semaines.\n\nRio et Tokyo :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRio_Tokyo_s <- interval(Fin_2016, Debut_2021) |>\n  as.numeric(\"weeks\") |>\n  round(0) |> \n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 257\n```\n:::\n:::\n\n\nTokyo et Paris :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTokyo_Paris_s <- interval(Fin_2021, Debut_2024) |>\n  as.numeric(\"weeks\") |>\n  round(0) |> \n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 155\n```\n:::\n:::\n\n\n### Fin\n\nSuppression des tables ajoutées à la base de données et déconnexion\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbRemoveTable(con, \"tokyo_athletes\")\ndbRemoveTable(con, \"olympics_athletes\")\ndbDisconnect(con)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}