{
  "hash": "f1571954b1e3060b300c266d89841d1a",
  "result": {
    "markdown": "---\ntitle: \"Exercices - Semaine 2\"\nauthor: \"Marie Kerhoas\"\ndate: \"2024-03-07\"\ncategories: [Exercices, Médailles, JO]\nimage: \"Medaille.jpg\"\ncode-fold: true\nwarning: false\n---\n\n\n## Exercices - Semaine 2\n\nDans ce post, vous trouverez la seconde série d'exercices sur R. Celle-ci est réalisée à partir de données issues de la page Wikipédia : liste des médaillés olympiques, et plus précisément celles concernant les jeux d'été et d'hiver par sport.\n\n### Les librairies\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(purrr)\nlibrary(tidyverse)\nlibrary(knitr)\n```\n:::\n\n\n### Question 1\n\nLancez la commande suivante :\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlist_tables <-\nsession(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |>\nhtml_elements(\".wikitable\") |>\nhtml_table()\n```\n:::\n\n\nQue s'est-il passé ? Que contient l'objet list_tables ?\n\nLa commande ci-dessus nous permet d'accéder à des données issues de la page \"Liste des médailles olympiques\" de Wikipédia. Plus précisément, l'objet list_table est une liste de 6 tibbles qui sont désormais accessibles.\n\n### Question 2\n\nPréparation initiale de la table des JO d'été.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_ete <- list_tables[[1]]\n\n# Supression de la première ligne et de la première colonne\ndata_medailles_sport_ete <- data_medailles_sport_ete[-c(1), -c(1)]\n\n\n# Renommage des titres de colonnes\nnames(data_medailles_sport_ete) <-\n  c(\n    \"Discipline\",\n    \"Annees\",\n    \"Editions\",\n    \"Epreuves_2020\",\n    \"Or\",\n    \"Argent\",\n    \"Bronze\",\n    \"Total\",\n    \"Athletes_medailles\",\n    \"Athletes_or\"\n  )\n\n# Changement de format\ndata_medailles_sport_ete$Editions <-\n  as.integer(data_medailles_sport_ete$Editions)\ndata_medailles_sport_ete$Epreuves_2020 <-\n  as.integer(data_medailles_sport_ete$Epreuves_2020)\ndata_medailles_sport_ete$Or <-\n  as.integer(data_medailles_sport_ete$Or)\ndata_medailles_sport_ete$Argent <-\n  as.integer(data_medailles_sport_ete$Argent)\ndata_medailles_sport_ete$Bronze <-\n  as.integer(data_medailles_sport_ete$Bronze)\ndata_medailles_sport_ete$Total <-\n  as.integer(data_medailles_sport_ete$Total)\n```\n:::\n\n\n### Question 3\n\nQuelles sont les 3 disciplines avec le plus de médailles distribuées depuis le début de l'histoire des jeux olympiques ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTrois_Disciplines_Plus_Medailles <- data_medailles_sport_ete |>\n  select(Discipline, Total) |>\n  arrange(desc(Total)) |>\n  head(n = 3)\nkable(Trois_Disciplines_Plus_Medailles)\n```\n\n::: {.cell-output-display}\n|Discipline               | Total|\n|:------------------------|-----:|\n|Athlétisme               |  3085|\n|Natation(hommes, femmes) |  1814|\n|Lutte                    |  1358|\n:::\n:::\n\n\n### Question 4\n\nQuelles sont les 3 disciplines avec le moins d'épreuves en 2020 ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTrois_Disciplines_Moins_Epreuves <- data_medailles_sport_ete |>\n  group_by(Discipline) |>\n  summarise(Nb_Epreuves = sum (Epreuves_2020)) |>\n  arrange(Nb_Epreuves) |>\n  head(n = 3)\nkable(Trois_Disciplines_Moins_Epreuves)\n```\n\n::: {.cell-output-display}\n|Discipline | Nb_Epreuves|\n|:----------|-----------:|\n|Football   |           2|\n|Golf       |           2|\n|Handball   |           2|\n:::\n:::\n\n\n### Question 5\n\nLa colonne Editions nous renseigne sur le nombre total d'apparence des disciplines aux JO d'été. Nous souhaitons vérifier ce calcul en implémentant notre propre fonction calcul_nb_editions_int. Dans un premier temps, la fonction calcul_nb_editions prendra en entrée un paramètre depuis, de type entier, qui représente depuis quelle année la discipline est au programme.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions_int <- function(depuis) {\n  Annee_0 <- depuis\n  Annee_0 <- as.integer(Annee_0)\n  Nb_Editions <-\n    1 + (2020 - Annee_0) / 4 # JO tous les 4 ans et 1 édition de + que /4\n  if (Annee_0 <= 1916) {\n    Nb_Editions <- Nb_Editions - 1\n  } # 1 Guerres Mondiales\n  if (Annee_0 <= 1940) {\n    Nb_Editions <- Nb_Editions - 2\n  } # 2 Guerre Mondiale\n  return(Nb_Editions)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ncalcul_nb_editions_int(2000) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n:::\n\n\n### Question 6\n\nDans certains cas, les disciplines ont été au programme de façon discontinue. Proposez une nouvelle fonction calcul_nb_editions_str qui prendra cette fois-ci en entrée des chaînes de caractères.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions_str <- function(texte) {\n  Nb_Editions <- 0\n  Annee <-\n    (strsplit(texte, \", \", fixed = TRUE)) # séparation avec la virgule\n  nb_param_annee <- length(Annee[[1]])\n  \n  for (i in 1:nb_param_annee) {\n    if (grepl(pattern = \"-\", x = Annee[[1]][i]) == \"TRUE\") {\n      # ex : 1900–1928\n      \n      Annee_diff <- strsplit(Annee[[1]][i], \"-\", fixed = TRUE)\n      Annee_plus <- as.integer(Annee_diff[[1]][2])\n      Annee_moins <- as.integer(Annee_diff[[1]][1])\n      Nb_Editions <-\n        Nb_Editions + 1 + (Annee_plus - Annee_moins) / 4 # différence\n      if (Annee_moins < 1916 & Annee_plus > 1916) {\n        # GM\n        Nb_Editions <- Nb_Editions - 1\n        if (Annee_plus > 1944) {\n          Nb_Editions <- Nb_Editions - 2\n        }\n      }\n      if (Annee_moins < 1940 &\n          Annee_plus > 1944) {\n        Nb_Editions <- Nb_Editions - 2\n      } # GM\n      \n      \n    } else if (grepl(pattern = \"depuis \", x = Annee[[1]][i]) == \"TRUE\") {\n      # ex : depuis 1936\n      Annee_1 <-\n        strsplit(Annee[[1]][i], \"depuis \", fixed = TRUE)[[1]][2]\n      Annee_1 <- as.integer(Annee_1)\n      Nb_Editions <- Nb_Editions + 1 + (2020 - Annee_1) / 4\n      if (Annee_1 <= 1916) {\n        Nb_Editions <- Nb_Editions - 3\n      } # GM\n      if (Annee_1 <= 1940 &\n          Annee_1 > 1916) {\n        Nb_Editions <- Nb_Editions - 2\n      } # GM\n      \n    } else {\n      Nb_Editions <- Nb_Editions + 1\n    } # ex : 1904\n  }\n  return(Nb_Editions)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ncalcul_nb_editions_str(\"1896, 1904, depuis 1920\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 26\n```\n:::\n:::\n\n\n### Question 7\n\nDéfinissez une fonction générique calcul_nb_editions et deux implémentations calcul_nb_editions.integer et 'calcul_nb_editions.character.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions <- function (param) {\n  if (is.numeric(param)) {\n    calcul_nb_editions_int(param) # méthode si param au format numérique\n  } else if (is.character(param)) {\n    calcul_nb_editions_str(param)\n  } # méthode si param au format texte\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ncalcul_nb_editions(2000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ncalcul_nb_editions(\"1904-1924, depuis 1948\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 24\n```\n:::\n:::\n\n\n### Question 8\n\nImplémentez une fonction calcul_medailles_individuelles qui détermine le nombre de médaille maximal a été obtenu par un athlète lors d'olympiades.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_medailles_individuelles <- function (sportif) {\n  for (i in 1:nrow(data_medailles_sport_ete)) {\n    # liste des athlètes médaillés pour le sport i\n    liste_sportif <-\n      strsplit(data_medailles_sport_ete$Athletes_medailles[i], \"\\\\(|\\\\)\") |>\n      unlist() |>\n      trimws() |>\n      keep( ~ nzchar(.))\n    \n    if (sportif %in% liste_sportif) {\n      # comparaison entre le nom entré de la fonction et la liste\n      position <- which(liste_sportif == sportif) + 2\n      nb_medailles <-\n        strsplit(liste_sportif[position], \"-\")[[1]] |>\n        as.integer() |>\n        sum () # somme des différentes médailles (or, argent et bronze)\n      return(nb_medailles)\n    }\n  }\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ncalcul_medailles_individuelles(\"Zbigniew Pietrzykowski\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\ncalcul_medailles_individuelles(\"Paavo Nurmi\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n:::\n\n\n### Question 9\n\nQuel est le top 3 des athlètes ? Vous utiliserez la fonction lapply pour appliquer la fonction calcul_medailles_individuelles à chaque élément de la colonne Athletes_medailles.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nliste_sportif_entiere <- list()\n\nfor (i in 1:nrow(data_medailles_sport_ete)) {\n  # liste de tous les noms de sportifs\n  liste_sportif_construction <-\n    strsplit(data_medailles_sport_ete$Athletes_medailles[i], \"\\\\(|\\\\)\") |> \n    # séparation\n    unlist() |>\n    trimws() |>\n    keep( ~ nzchar(.))\n  liste_sportif_construction <- liste_sportif_construction |>\n    split(rep(1:(length(\n      liste_sportif_construction\n    ) / 3), each = 3)) # groupement par 3 : nom, nationalité et médailles\n  for (valeur in liste_sportif_construction) {\n    liste_sportif_entiere <-\n      c(liste_sportif_entiere, valeur[[1]]) # sélection du nom\n  }\n}\n\nliste_sportif_entiere <- liste_sportif_entiere |> unlist()\n\n\nnom <- list()\nnb_medaille <- list()\n\nfor (s in liste_sportif_entiere) {\n  # regroupement des noms et nombres de médailles dans 2 liste\n  med <- lapply(s, calcul_medailles_individuelles)\n  nom <- c(nom, s)\n  nb_medaille <- c(nb_medaille, med)\n}\n\ndata_medailles <-\n  data.frame(Nom_Sportif = unlist(nom),\n             # data frame synthétique des noms et nombres de médailles\n             Nombre_medailles = unlist(nb_medaille))\n\nTop3_athlete <- data_medailles |>\n  arrange(desc(Nombre_medailles)) |>\n  head (n = 3) \n\nkable(Top3_athlete)\n```\n\n::: {.cell-output-display}\n|Nom_Sportif         | Nombre_medailles|\n|:-------------------|----------------:|\n|Michael Phelps      |               28|\n|Larissa Latynina    |               18|\n|Edoardo Mangiarotti |               13|\n:::\n:::\n\n\n### Question 10\n\nQuels sont les 3 nationalités les plus représentées, pour toutes les épreuves, au classement du nombre de médailles d'or individuelles reccueillies ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nliste_nat_entiere <- list()\n\nfor (i in 1:nrow(data_medailles_sport_ete)) {\n  # liste de toutes les nationalités répertoriées\n  liste_nat_construction <-\n    strsplit(data_medailles_sport_ete$Athletes_or[i], \"\\\\(|\\\\)\") |> \n    # pour les médailles d'or\n    unlist() |>\n    trimws() |>\n    keep( ~ nzchar(.))\n  if (is.na(liste_nat_construction[2]) == FALSE) {\n    # valeur aberrante ligne 11 écartée\n    liste_nat_construction <- liste_nat_construction |>\n      split(rep(1:(length(\n        liste_nat_construction\n      ) / 3), each = 3))\n    for (valeur in liste_nat_construction) {\n      liste_nat_entiere <-\n        c(liste_nat_entiere, valeur[[2]]) # sélection des nationalités\n    }\n  }\n}\n\nliste_nat_entiere <-\n  liste_nat_entiere |>  # suppression des répétitions\n  unlist() |>\n  unique()\n\n\nextraire_nationalite_athlete <- function(chaine) {\n  sortie <- list()\n  for (nat in liste_nat_entiere) {\n    # parmi toutes les nationalités\n    test <-\n      grepl(pattern = nat, x = chaine) \n    # test de la présence de la nationalité n dans la chaine\n    if (test == \"TRUE\") {\n      resultat <- gregexpr(nat, chaine)\n      nb_apparitions <-\n        sum(attr(resultat[[1]], \"match.length\") > 0) # somme des apparitions\n      sortie <- c(sortie, (paste(nat, \":\", nb_apparitions)))\n    }\n  }\n  sortie <- sortie |> unlist()\n  return(paste(sortie, collapse = \" , \"))\n}\n# extraire_nationalite_athlete(\"Paavo Nurmi (FIN) (9-3-0) Carl Lewis (USA) (9-1-0)\") # \"FIN : 1 , USA : 1\"\n\n\nnat_2020_sport <-\n  lapply(data_medailles_sport_ete$Athletes_or,\n         extraire_nationalite_athlete) |>\n  unlist() # pour toute la colonne\n\n\nnat <- list()\nnb_or <- list()\n\nfor (n in seq_along(liste_nat_entiere)) {\n  # aggrégation des résultats\n  \n  nb_nat_2020 <- 0\n  \n  for (s in nat_2020_sport) {\n    if (grepl(pattern = liste_nat_entiere[n], x = s) == \"TRUE\") {\n      # si pour le sport s il y a la nationalité n\n      liste_sport <- strsplit(s, \" \")[[1]]\n      position <-\n        which(liste_sport == liste_nat_entiere[n]) + 2 # la position du nb de sportifs en or\n      nb_nat_2020_inter <- liste_sport[position] |>\n        as.integer()\n      nb_nat_2020 <-\n        nb_nat_2020 + nb_nat_2020_inter # ajout de la valeur à celle précédente\n    }\n  }\n  \n  nat <- c(nat, liste_nat_entiere[n])\n  nb_or <- c(nb_or, nb_nat_2020)\n}\n\ndata_medailles_or <-\n  data.frame(Nationalite = unlist(nat),\n             # data frame synthétique du nombre d'athlètes en or par nationalité\n             Nombre_athletes_or = unlist(nb_or))\n\nTop3_nat <- data_medailles_or |>\n  arrange(desc(Nombre_athletes_or)) |>\n  head (n = 3)\n\nkable(Top3_nat)\n```\n\n::: {.cell-output-display}\n|Nationalite | Nombre_athletes_or|\n|:-----------|------------------:|\n|USA         |                 20|\n|CHN         |                 13|\n|CUB         |                  8|\n:::\n:::\n\n\n### Question 11\n\nIntéressez-vous désormais au deuxième tableau contenu dans list_tables, faisant référence aux JO d'hiver. Appliquez les fonctions calcul_medailles_individuelles et extraire_nationalite_athlete aux deux dernières colonnes, à la manière des questions 9 et 10. Cette fois-ci, vous utiliserez la fonction appropriée du package purrr en lieu et place de lapply. Quelles sont les résultats ?\n\nNettoyage des données\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_hiver <- list_tables[[2]]\n\n# Modifications de départ\ndata_medailles_sport_hiver <-\n  data_medailles_sport_hiver[-c(1), -c(1)]\n\nnames(data_medailles_sport_hiver) <-\n  c(\n    \"Discipline\",\n    \"Annees\",\n    \"Editions\",\n    \"Epreuves_2020\",\n    \"Or\",\n    \"Argent\",\n    \"Bronze\",\n    \"Total\",\n    \"Athletes_medailles\",\n    \"Athletes_or\"\n  )\n\ndata_medailles_sport_hiver$Editions <-\n  as.integer(data_medailles_sport_hiver$Editions)\ndata_medailles_sport_hiver$Epreuves_2020 <-\n  as.integer(data_medailles_sport_hiver$Epreuves_2020)\ndata_medailles_sport_hiver$Or <-\n  as.integer(data_medailles_sport_hiver$Or)\ndata_medailles_sport_hiver$Argent <-\n  as.integer(data_medailles_sport_hiver$Argent)\ndata_medailles_sport_hiver$Bronze <-\n  as.integer(data_medailles_sport_hiver$Bronze)\ndata_medailles_sport_hiver$Total <-\n  as.integer(data_medailles_sport_hiver$Total)\n\ndata_medailles_sport_hiver$Athletes_medailles[9] <- \"Viktor Ahn (KOR / RUS) (6-0-2) Apolo Anton Ohno (USA) (2-2-4) Arianna Fontana (ITA) (1-2-5)\"\ndata_medailles_sport_hiver$Athletes_or[9] <- \"Viktor Ahn (KOR / RUS) (6-0-2)\"\n```\n:::\n\n\nQuestion 9 : Quel est le top 3 des athlètes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# liste des athlètes médaillés d'hiver\nliste_sportif_entiere_hiver <- list()\n\nfor (i in 1:nrow(data_medailles_sport_hiver)) {\n  # liste de tous les noms de sportifs\n  liste_sportif_construction_hiver <-\n    strsplit(data_medailles_sport_hiver$Athletes_medailles[i], \"\\\\(|\\\\)\") |> \n    # séparation\n    unlist() |>\n    trimws() |>\n    keep( ~ nzchar(.))\n  liste_sportif_construction_hiver <- liste_sportif_construction_hiver |>\n    split(rep(1:(length(\n      liste_sportif_construction_hiver\n    ) / 3), each = 3)) # groupement par 3 : nom, nationalité et médailles\n  for (valeur in liste_sportif_construction_hiver) {\n    liste_sportif_entiere_hiver <-\n      c(liste_sportif_entiere_hiver, valeur[[1]]) # sélection du nom\n  }\n}\n\nliste_sportif_entiere_hiver <- liste_sportif_entiere_hiver |> unlist()\n\n# fonction calculant le nombre de médailles pour 1 athlète\ncalcul_medailles_individuelles_hiver <- function (sportif) {\n  for (i in 1:nrow(data_medailles_sport_hiver)) {\n    # liste des athlètes médaillés pour le sport i\n    liste_sportif_hiver <-\n      strsplit(data_medailles_sport_hiver$Athletes_medailles[i], \"\\\\(|\\\\)\") |>\n      unlist() |>\n      trimws() |>\n      keep( ~ nzchar(.))\n    \n    if (sportif %in% liste_sportif_hiver) {\n      # comparaison entre le nom entré de la fonction et la liste\n      position <- which(liste_sportif_hiver == sportif) + 2\n      nb_medailles <-\n        strsplit(liste_sportif_hiver[position], \"-\")[[1]] |>\n        as.integer() |>\n        sum () # somme des différentes médailles (or, argent et bronze)\n      return(nb_medailles)\n    }\n  }\n}\n\n# application de la fonction à l'ensemble des athlètes\nnom_hiver <- list()\nnb_medaille_hiver <- list()\n\nfor (s in liste_sportif_entiere_hiver) {\n  # regroupement des noms et nombres de médailles dans 2 liste\n  med <- map(s, calcul_medailles_individuelles_hiver)\n  nom_hiver <- c(nom_hiver, s)\n  nb_medaille_hiver <- c(nb_medaille_hiver, med)\n}\n\n# Création d'un dataframe synthétique\ndata_medailles_hiver <-\n  data.frame(Nom_Sportif = unlist(nom_hiver),\n             # data frame synthétique des noms et nombres de médailles\n             Nombre_medailles = unlist(nb_medaille_hiver))\n\n# Top 3\nTop3_athlete_hiver <- data_medailles_hiver |>\n  arrange(desc(Nombre_medailles)) |>\n  head (n = 3)\n\nkable(Top3_athlete_hiver)\n```\n\n::: {.cell-output-display}\n|Nom_Sportif          | Nombre_medailles|\n|:--------------------|----------------:|\n|Marit Bjørgen        |               15|\n|Ole Einar Bjørndalen |               13|\n|Ireen Wüst           |               11|\n:::\n:::\n\n\nQuestion 10 : Quels sont les 3 nationalités les plus représentées ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nliste_nat_entiere_hiver <- list()\n\nfor (i in 1:nrow(data_medailles_sport_hiver)) {\n  # liste de toutes les nationalités répertoriées\n  liste_nat_construction_hiver <-\n    strsplit(data_medailles_sport_hiver$Athletes_or[i], \"\\\\(|\\\\)\") |> \n    # pour les médailles d'or\n    unlist() |>\n    trimws() |>\n    keep( ~ nzchar(.))\n  \n    liste_nat_construction_hiver <- liste_nat_construction_hiver |>\n      split(rep(1:(length(\n        liste_nat_construction_hiver\n      ) / 3), each = 3))\n    \n    for (valeur in liste_nat_construction_hiver) {\n      liste_nat_entiere_hiver <-\n        c(liste_nat_entiere_hiver, valeur[[2]]) # sélection des nationalités\n    }\n}\n\nliste_nat_entiere_hiver <-\n  liste_nat_entiere_hiver |>  # suppression des répétitions\n  unlist() |>\n  unique()\n\n\nextraire_nationalite_athlete_hiver <- function(chaine) {\n  sortie <- list()\n  for (nat in liste_nat_entiere_hiver) {\n    # parmi toutes les nationalités\n    test <-\n      grepl(pattern = nat, x = chaine) \n    # test de la présence de la nationalité n dans la chaine\n    if (test == \"TRUE\") {\n      resultat <- gregexpr(nat, chaine)\n      nb_apparitions <-\n        sum(attr(resultat[[1]], \"match.length\") > 0) # somme des apparitions\n      sortie <- c(sortie, (paste(nat, \":\", nb_apparitions)))\n    }\n  }\n  sortie <- sortie |> unlist()\n  return(paste(sortie, collapse = \" , \"))\n}\n# extraire_nationalite_athlete_hiver(\"Kevin Kuske (GER) (4-1-0) André Lange (GER) (4-1-0)\") \n# \"GER : 2\"\n\n\nnat_2020_sport_hiver <-\n  map(data_medailles_sport_hiver$Athletes_or,\n         extraire_nationalite_athlete_hiver) |>\n  unlist() # pour toute la colonne\n\n\nnat_hiver <- list()\nnb_or_hiver <- list()\n\nfor (n in seq_along(liste_nat_entiere_hiver)) {\n  # aggrégation des résultats\n  \n  nb_nat_2020_hiver <- 0\n  \n  for (s in nat_2020_sport_hiver) {\n    if (grepl(pattern = liste_nat_entiere_hiver[n], x = s) == \"TRUE\") {\n      # si pour le sport s il y a la nationalité n\n      liste_sport_hiver <- strsplit(s, \" , \")[[1]]\n      for (n_s in seq_along(liste_sport_hiver)) {\n        if (grepl(pattern = liste_nat_entiere_hiver[n],\n                  x = liste_sport_hiver[n_s]) == \"TRUE\") {\n          liste_sport_inter_hiver <- strsplit(liste_sport_hiver[n_s], \" : \")[[1]]\n          nb_nat_2020_inter_hiver <- liste_sport_inter_hiver[2] |>\n                                     as.integer()\n          nb_nat_2020_hiver <- nb_nat_2020_hiver + nb_nat_2020_inter_hiver \n          # ajout de la valeur à celle précédente\n        }\n      }\n    } \n  }\n  \n  nat_hiver <- c(nat_hiver, liste_nat_entiere_hiver[n])\n  nb_or_hiver <- c(nb_or_hiver, nb_nat_2020_hiver)\n}\n\ndata_medailles_or_hiver <-\n  data.frame(Nationalite = unlist(nat_hiver),\n             # data frame synthétique du nombre d'athlètes en or par nationalité\n             Nombre_athletes_or = unlist(nb_or_hiver))\n\nTop3_nat_hiver <- data_medailles_or_hiver |>\n  arrange(desc(Nombre_athletes_or)) |>\n  head (n = 3)\n\nkable(Top3_nat_hiver)\n```\n\n::: {.cell-output-display}\n|Nationalite | Nombre_athletes_or|\n|:-----------|------------------:|\n|CAN         |                  8|\n|NOR         |                  7|\n|GER         |                  6|\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}