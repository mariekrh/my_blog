[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Accueil",
    "section": "",
    "text": "Bienvenue sur ce blog !\nVous y trouverez l’ensemble du travail d’entraînement que j’ai réalisé dans le cadre du cours de R suivi ce semestre.\nLa thématique étudiée était celle des Jeux Olympiques."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Présentation",
    "section": "",
    "text": "Marie Kerhoas\nEtudiante en Master 1 d’économétrie appliquée à l’IAE de Nantes"
  },
  {
    "objectID": "posts/librairie_olympicsWeather/index.html",
    "href": "posts/librairie_olympicsWeather/index.html",
    "title": "Librairie olympicsWeather",
    "section": "",
    "text": "Le package olympicsWeather a pour objectif d’informer sur les prévisions météo des sites olympiques. La fonction get_forecast comprise à l’intérieur de cette librairie vous permettra de connaître les prévisions, relatives aux températures et à la pluie estimées, à partir d’une adresse ou de coordonnées gps. Ces dernières font référence à des sites olympiques.\n\n\n\nActuellement, la librairie olympicsWeather est stockée sur un dépôt GitHub, aussi afin de l’utiliser, il est nécessaire de l’importer et de l’installer dans votre environnement R. Voici donc les étapes à suivre sur R Studio afin d’y parvenir. Dans un premier temps, il est nécessaire d’avoir installé la librairie “remotes” depuis le CRAN. La seconde étape consiste à utiliser la fonction install_github de “remotes”. Elle permet d’installer la librairie olympisWeather depuis le dépôt GitHub sur votre environnement R. Désormais, vous pouvez appeler ce package et l’utiliser à votre guise.\nVoici le code à exécuter pour parvenir à cet objectif :\nEtape 1 :\n\ninstall.packages(\"remotes\")\n\nEtape 2 :\n\nremotes::install_github(\"mariekrh/olympicsWeather\")\n\nEtape 3 :\n\nlibrary(olympicsWeather)\n\n\n\n\nQuelles sont les prévisions météo à 7 jours pour les lieux suivants ?\n\nStade de France\n\n\n\nCode\nSdF &lt;- get_forecast(\"stade de France\")\n\ngridExtra::grid.arrange(SdF$graphs[[1]],SdF$graphs[[2]],SdF$graphs[[3]],ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\nLes données météo chiffrées du Stade de France\n\n\n\n\n\n\n\nCode\nSdF$table\n\n\n\n\n\n\n\n\n\n\n\n\ndate_heure\ntemperature_celsius\ntemperature_ressentie_celsius\nchance_pluie\nquantite_pluie\n\n\n\n\n2024-03-10T00:00\n8.0\n6.2\n32\n0.0\n\n\n2024-03-10T01:00\n8.0\n5.4\n27\n0.0\n\n\n2024-03-10T02:00\n7.8\n5.4\n21\n0.2\n\n\n2024-03-10T03:00\n7.9\n5.9\n16\n0.1\n\n\n2024-03-10T04:00\n7.5\n5.6\n21\n0.0\n\n\n2024-03-10T05:00\n7.5\n5.8\n27\n0.0\n\n\n2024-03-10T06:00\n7.5\n5.5\n32\n0.1\n\n\n2024-03-10T07:00\n7.4\n5.8\n32\n0.2\n\n\n2024-03-10T08:00\n7.4\n5.0\n32\n1.7\n\n\n2024-03-10T09:00\n7.5\n5.4\n32\n0.4\n\n\n2024-03-10T10:00\n8.2\n6.3\n32\n0.2\n\n\n2024-03-10T11:00\n8.9\n7.0\n32\n0.0\n\n\n2024-03-10T12:00\n9.6\n7.7\n32\n0.0\n\n\n2024-03-10T13:00\n10.2\n8.2\n32\n0.0\n\n\n2024-03-10T14:00\n10.7\n8.5\n32\n0.0\n\n\n2024-03-10T15:00\n11.1\n8.8\n32\n0.0\n\n\n2024-03-10T16:00\n11.1\n8.7\n31\n0.0\n\n\n2024-03-10T17:00\n10.7\n8.4\n30\n0.0\n\n\n2024-03-10T18:00\n10.0\n8.3\n29\n0.0\n\n\n2024-03-10T19:00\n9.0\n7.4\n30\n0.0\n\n\n2024-03-10T20:00\n8.3\n6.8\n31\n0.0\n\n\n2024-03-10T21:00\n7.6\n5.9\n32\n0.0\n\n\n2024-03-10T22:00\n7.0\n5.5\n23\n0.0\n\n\n2024-03-10T23:00\n6.6\n4.9\n15\n0.0\n\n\n2024-03-11T00:00\n6.2\n4.5\n6\n0.0\n\n\n2024-03-11T01:00\n5.8\n3.9\n6\n0.0\n\n\n2024-03-11T02:00\n5.3\n3.3\n6\n0.0\n\n\n2024-03-11T03:00\n5.0\n3.0\n6\n0.0\n\n\n2024-03-11T04:00\n4.9\n2.8\n6\n0.0\n\n\n2024-03-11T05:00\n4.6\n2.4\n6\n0.0\n\n\n2024-03-11T06:00\n4.5\n2.4\n6\n0.0\n\n\n2024-03-11T07:00\n4.6\n2.5\n7\n0.0\n\n\n2024-03-11T08:00\n5.8\n3.9\n9\n0.0\n\n\n2024-03-11T09:00\n8.0\n5.8\n10\n0.0\n\n\n2024-03-11T10:00\n10.0\n7.4\n13\n0.0\n\n\n2024-03-11T11:00\n11.7\n9.0\n16\n0.0\n\n\n2024-03-11T12:00\n12.7\n9.0\n19\n0.0\n\n\n2024-03-11T13:00\n13.2\n9.8\n32\n0.0\n\n\n2024-03-11T14:00\n13.6\n10.6\n45\n0.0\n\n\n2024-03-11T15:00\n12.8\n9.8\n58\n0.1\n\n\n2024-03-11T16:00\n12.5\n9.6\n52\n0.0\n\n\n2024-03-11T17:00\n12.2\n9.7\n45\n0.0\n\n\n2024-03-11T18:00\n11.4\n9.1\n39\n0.0\n\n\n2024-03-11T19:00\n10.4\n8.5\n27\n0.4\n\n\n2024-03-11T20:00\n9.7\n8.1\n15\n0.6\n\n\n2024-03-11T21:00\n9.4\n7.5\n3\n0.2\n\n\n2024-03-11T22:00\n9.0\n6.9\n5\n0.0\n\n\n2024-03-11T23:00\n8.6\n6.2\n8\n0.0\n\n\n2024-03-12T00:00\n8.3\n6.2\n10\n0.2\n\n\n2024-03-12T01:00\n8.2\n6.0\n12\n0.0\n\n\n2024-03-12T02:00\n8.0\n5.8\n14\n0.0\n\n\n2024-03-12T03:00\n7.8\n5.4\n16\n0.0\n\n\n2024-03-12T04:00\n7.4\n5.2\n16\n0.0\n\n\n2024-03-12T05:00\n6.9\n4.7\n16\n0.0\n\n\n2024-03-12T06:00\n6.7\n4.5\n16\n0.0\n\n\n2024-03-12T07:00\n7.2\n5.3\n14\n0.2\n\n\n2024-03-12T08:00\n7.7\n5.5\n12\n0.2\n\n\n2024-03-12T09:00\n9.2\n6.4\n10\n0.0\n\n\n2024-03-12T10:00\n10.2\n7.2\n15\n0.0\n\n\n2024-03-12T11:00\n11.0\n7.9\n21\n0.0\n\n\n2024-03-12T12:00\n11.4\n8.0\n26\n0.0\n\n\n2024-03-12T13:00\n11.0\n8.2\n32\n0.2\n\n\n2024-03-12T14:00\n11.2\n8.5\n39\n0.1\n\n\n2024-03-12T15:00\n10.6\n7.9\n45\n0.3\n\n\n2024-03-12T16:00\n10.4\n8.1\n42\n0.3\n\n\n2024-03-12T17:00\n10.1\n8.0\n38\n0.6\n\n\n2024-03-12T18:00\n9.8\n8.0\n35\n0.3\n\n\n2024-03-12T19:00\n9.6\n8.0\n31\n0.4\n\n\n2024-03-12T20:00\n9.7\n8.2\n27\n0.5\n\n\n2024-03-12T21:00\n9.7\n8.4\n23\n0.0\n\n\n2024-03-12T22:00\n9.7\n8.5\n20\n0.0\n\n\n2024-03-12T23:00\n9.5\n8.3\n16\n0.0\n\n\n2024-03-13T00:00\n9.4\n8.3\n13\n0.0\n\n\n2024-03-13T01:00\n9.3\n8.3\n11\n0.0\n\n\n2024-03-13T02:00\n9.2\n8.2\n8\n0.0\n\n\n2024-03-13T03:00\n9.0\n7.9\n6\n0.0\n\n\n2024-03-13T04:00\n8.9\n7.8\n6\n0.0\n\n\n2024-03-13T05:00\n8.8\n7.7\n6\n0.0\n\n\n2024-03-13T06:00\n8.7\n7.7\n6\n0.0\n\n\n2024-03-13T07:00\n9.2\n8.2\n4\n0.0\n\n\n2024-03-13T08:00\n9.9\n8.8\n2\n0.0\n\n\n2024-03-13T09:00\n10.8\n9.6\n0\n0.0\n\n\n2024-03-13T10:00\n11.8\n10.4\n1\n0.0\n\n\n2024-03-13T11:00\n12.9\n11.4\n2\n0.0\n\n\n2024-03-13T12:00\n13.9\n12.2\n3\n0.0\n\n\n2024-03-13T13:00\n14.7\n12.9\n3\n0.0\n\n\n2024-03-13T14:00\n15.3\n13.5\n3\n0.0\n\n\n2024-03-13T15:00\n15.6\n13.9\n3\n0.0\n\n\n2024-03-13T16:00\n15.3\n13.9\n2\n0.0\n\n\n2024-03-13T17:00\n14.6\n13.5\n1\n0.0\n\n\n2024-03-13T18:00\n13.8\n12.8\n0\n0.0\n\n\n2024-03-13T19:00\n12.8\n11.8\n0\n0.0\n\n\n2024-03-13T20:00\n11.6\n10.6\n0\n0.0\n\n\n2024-03-13T21:00\n10.6\n9.6\n0\n0.0\n\n\n2024-03-13T22:00\n9.9\n8.8\n0\n0.0\n\n\n2024-03-13T23:00\n9.4\n8.2\n0\n0.0\n\n\n2024-03-14T00:00\n9.0\n7.7\n0\n0.0\n\n\n2024-03-14T01:00\n8.6\n7.2\n0\n0.0\n\n\n2024-03-14T02:00\n8.3\n6.8\n0\n0.0\n\n\n2024-03-14T03:00\n8.0\n6.4\n0\n0.0\n\n\n2024-03-14T04:00\n7.5\n6.0\n0\n0.0\n\n\n2024-03-14T05:00\n7.1\n5.5\n0\n0.0\n\n\n2024-03-14T06:00\n7.1\n5.4\n0\n0.0\n\n\n2024-03-14T07:00\n7.8\n6.0\n0\n0.0\n\n\n2024-03-14T08:00\n9.1\n7.0\n0\n0.0\n\n\n2024-03-14T09:00\n10.5\n8.3\n0\n0.0\n\n\n2024-03-14T10:00\n12.1\n10.0\n0\n0.0\n\n\n2024-03-14T11:00\n13.8\n11.9\n0\n0.0\n\n\n2024-03-14T12:00\n15.2\n13.5\n0\n0.0\n\n\n2024-03-14T13:00\n16.1\n14.2\n0\n0.0\n\n\n2024-03-14T14:00\n16.8\n14.7\n0\n0.0\n\n\n2024-03-14T15:00\n17.0\n14.9\n0\n0.0\n\n\n2024-03-14T16:00\n16.7\n14.6\n0\n0.0\n\n\n2024-03-14T17:00\n16.0\n14.0\n0\n0.0\n\n\n2024-03-14T18:00\n15.3\n13.4\n0\n0.0\n\n\n2024-03-14T19:00\n14.5\n12.9\n0\n0.0\n\n\n2024-03-14T20:00\n13.7\n12.3\n0\n0.0\n\n\n2024-03-14T21:00\n13.0\n11.8\n0\n0.0\n\n\n2024-03-14T22:00\n12.5\n11.4\n0\n0.1\n\n\n2024-03-14T23:00\n12.2\n11.2\n0\n0.1\n\n\n2024-03-15T00:00\n12.0\n11.0\n0\n0.1\n\n\n2024-03-15T01:00\n12.0\n10.8\n3\n0.4\n\n\n2024-03-15T02:00\n11.9\n10.6\n7\n0.4\n\n\n2024-03-15T03:00\n11.7\n10.3\n10\n0.4\n\n\n2024-03-15T04:00\n11.4\n9.9\n12\n0.1\n\n\n2024-03-15T05:00\n11.2\n9.4\n14\n0.1\n\n\n2024-03-15T06:00\n11.2\n9.2\n16\n0.1\n\n\n2024-03-15T07:00\n11.5\n9.4\n19\n0.2\n\n\n2024-03-15T08:00\n12.0\n9.5\n23\n0.2\n\n\n2024-03-15T09:00\n12.7\n10.0\n26\n0.2\n\n\n2024-03-15T10:00\n13.6\n11.0\n27\n0.3\n\n\n2024-03-15T11:00\n14.6\n12.1\n28\n0.3\n\n\n2024-03-15T12:00\n15.3\n12.9\n29\n0.3\n\n\n2024-03-15T13:00\n15.4\n13.1\n29\n0.8\n\n\n2024-03-15T14:00\n15.1\n12.9\n29\n0.8\n\n\n2024-03-15T15:00\n14.7\n12.7\n29\n0.8\n\n\n2024-03-15T16:00\n14.4\n12.5\n29\n0.3\n\n\n2024-03-15T17:00\n13.9\n12.2\n29\n0.3\n\n\n2024-03-15T18:00\n13.4\n11.8\n29\n0.3\n\n\n2024-03-15T19:00\n12.9\n11.2\n33\n0.1\n\n\n2024-03-15T20:00\n12.4\n10.6\n38\n0.1\n\n\n2024-03-15T21:00\n12.0\n10.0\n42\n0.1\n\n\n2024-03-15T22:00\n11.7\n9.7\n32\n0.1\n\n\n2024-03-15T23:00\n11.6\n9.5\n23\n0.1\n\n\n2024-03-16T00:00\n11.4\n9.3\n13\n0.1\n\n\n2024-03-16T01:00\n11.3\n9.3\n13\n0.0\n\n\n2024-03-16T02:00\n11.2\n9.4\n13\n0.0\n\n\n2024-03-16T03:00\n11.0\n9.4\n13\n0.0\n\n\n2024-03-16T04:00\n10.7\n9.1\n14\n0.0\n\n\n2024-03-16T05:00\n10.4\n8.6\n15\n0.0\n\n\n2024-03-16T06:00\n10.4\n8.6\n16\n0.0\n\n\n2024-03-16T07:00\n11.0\n9.0\n17\n0.0\n\n\n2024-03-16T08:00\n11.9\n9.6\n18\n0.0\n\n\n2024-03-16T09:00\n12.7\n10.4\n19\n0.0\n\n\n2024-03-16T10:00\n13.3\n11.1\n21\n0.0\n\n\n2024-03-16T11:00\n13.8\n11.9\n24\n0.0\n\n\n2024-03-16T12:00\n14.2\n12.6\n26\n0.0\n\n\n2024-03-16T13:00\n14.4\n13.1\n30\n0.4\n\n\n2024-03-16T14:00\n14.6\n13.5\n35\n0.4\n\n\n2024-03-16T15:00\n14.7\n13.8\n39\n0.4\n\n\n2024-03-16T16:00\n14.8\n14.0\n44\n0.0\n\n\n2024-03-16T17:00\n14.8\n14.2\n50\n0.0\n\n\n2024-03-16T18:00\n14.6\n14.2\n55\n0.0\n\n\n2024-03-16T19:00\n14.2\n13.7\n51\n0.0\n\n\n2024-03-16T20:00\n13.7\n13.0\n46\n0.0\n\n\n2024-03-16T21:00\n13.3\n12.5\n42\n0.0\n\n\n2024-03-16T22:00\n13.0\n12.2\n42\n0.2\n\n\n2024-03-16T23:00\n12.7\n11.9\n42\n0.2\n\n\n\n\n\n\n\n\n\nTahiti\n\n\n\nCode\nTah &lt;- get_forecast(\"Tahiti\")\n\ngridExtra::grid.arrange(Tah$graphs[[1]],Tah$graphs[[2]],Tah$graphs[[3]], ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\nLes données météo chiffrées de Tahiti\n\n\n\n\n\n\n\nCode\nTah$table\n\n\n\n\n\n\n\n\n\n\n\n\ndate_heure\ntemperature_celsius\ntemperature_ressentie_celsius\nchance_pluie\nquantite_pluie\n\n\n\n\n2024-03-10T00:00\n17.1\n19.4\n100\n0.1\n\n\n2024-03-10T01:00\n16.9\n18.5\n100\n0.3\n\n\n2024-03-10T02:00\n16.8\n18.6\n100\n1.3\n\n\n2024-03-10T03:00\n16.7\n18.5\n100\n2.3\n\n\n2024-03-10T04:00\n16.7\n18.1\n100\n2.0\n\n\n2024-03-10T05:00\n16.9\n18.2\n100\n1.1\n\n\n2024-03-10T06:00\n17.1\n18.8\n100\n0.0\n\n\n2024-03-10T07:00\n17.1\n18.4\n99\n0.0\n\n\n2024-03-10T08:00\n17.1\n18.5\n98\n0.3\n\n\n2024-03-10T09:00\n17.1\n18.6\n97\n0.1\n\n\n2024-03-10T10:00\n17.1\n18.7\n93\n0.0\n\n\n2024-03-10T11:00\n17.2\n18.6\n88\n0.0\n\n\n2024-03-10T12:00\n17.3\n18.8\n84\n0.0\n\n\n2024-03-10T13:00\n17.1\n18.6\n70\n0.0\n\n\n2024-03-10T14:00\n17.1\n18.7\n56\n0.1\n\n\n2024-03-10T15:00\n17.1\n18.6\n42\n0.1\n\n\n2024-03-10T16:00\n17.1\n18.7\n54\n0.0\n\n\n2024-03-10T17:00\n17.1\n18.6\n65\n0.0\n\n\n2024-03-10T18:00\n17.0\n18.5\n77\n0.1\n\n\n2024-03-10T19:00\n16.9\n18.5\n70\n0.1\n\n\n2024-03-10T20:00\n16.8\n18.6\n62\n0.2\n\n\n2024-03-10T21:00\n16.8\n20.0\n55\n0.1\n\n\n2024-03-10T22:00\n17.0\n20.1\n66\n0.0\n\n\n2024-03-10T23:00\n17.0\n20.5\n76\n0.2\n\n\n2024-03-11T00:00\n17.0\n19.8\n87\n0.2\n\n\n2024-03-11T01:00\n17.0\n19.6\n85\n0.1\n\n\n2024-03-11T02:00\n17.2\n18.7\n83\n0.0\n\n\n2024-03-11T03:00\n17.2\n18.6\n81\n0.1\n\n\n2024-03-11T04:00\n17.2\n18.7\n79\n0.1\n\n\n2024-03-11T05:00\n17.2\n18.9\n76\n0.0\n\n\n2024-03-11T06:00\n17.1\n18.6\n74\n0.1\n\n\n2024-03-11T07:00\n17.1\n18.6\n76\n0.2\n\n\n2024-03-11T08:00\n16.9\n18.5\n79\n1.3\n\n\n2024-03-11T09:00\n17.4\n18.2\n81\n0.5\n\n\n2024-03-11T10:00\n17.1\n18.3\n72\n0.5\n\n\n2024-03-11T11:00\n16.9\n18.1\n64\n2.1\n\n\n2024-03-11T12:00\n17.0\n18.3\n55\n1.3\n\n\n2024-03-11T13:00\n17.0\n18.3\n65\n0.1\n\n\n2024-03-11T14:00\n17.0\n18.2\n74\n0.2\n\n\n2024-03-11T15:00\n17.3\n18.7\n84\n0.0\n\n\n2024-03-11T16:00\n17.5\n18.8\n80\n0.0\n\n\n2024-03-11T17:00\n17.6\n19.1\n75\n0.0\n\n\n2024-03-11T18:00\n17.7\n19.1\n71\n0.0\n\n\n2024-03-11T19:00\n17.9\n19.0\n67\n0.0\n\n\n2024-03-11T20:00\n17.7\n19.6\n62\n0.1\n\n\n2024-03-11T21:00\n17.6\n20.1\n58\n0.1\n\n\n2024-03-11T22:00\n17.8\n20.9\n58\n0.1\n\n\n2024-03-11T23:00\n17.8\n21.2\n58\n0.1\n\n\n2024-03-12T00:00\n17.8\n20.5\n58\n0.1\n\n\n2024-03-12T01:00\n17.6\n19.4\n58\n0.2\n\n\n2024-03-12T02:00\n17.2\n18.7\n58\n0.5\n\n\n2024-03-12T03:00\n17.2\n19.0\n58\n0.4\n\n\n2024-03-12T04:00\n17.0\n18.8\n53\n0.2\n\n\n2024-03-12T05:00\n17.0\n18.7\n47\n0.2\n\n\n2024-03-12T06:00\n17.2\n18.6\n42\n0.1\n\n\n2024-03-12T07:00\n17.4\n18.9\n47\n0.0\n\n\n2024-03-12T08:00\n17.6\n18.9\n53\n0.0\n\n\n2024-03-12T09:00\n17.8\n19.0\n58\n0.0\n\n\n2024-03-12T10:00\n17.8\n18.8\n58\n0.0\n\n\n2024-03-12T11:00\n17.8\n18.8\n58\n0.0\n\n\n2024-03-12T12:00\n17.7\n18.9\n58\n0.0\n\n\n2024-03-12T13:00\n17.7\n18.8\n54\n0.0\n\n\n2024-03-12T14:00\n17.7\n18.8\n49\n0.0\n\n\n2024-03-12T15:00\n17.8\n19.0\n45\n0.0\n\n\n2024-03-12T16:00\n17.8\n18.8\n41\n0.0\n\n\n2024-03-12T17:00\n17.9\n18.9\n36\n0.0\n\n\n2024-03-12T18:00\n18.1\n18.9\n32\n0.0\n\n\n2024-03-12T19:00\n18.2\n18.8\n34\n0.0\n\n\n2024-03-12T20:00\n18.4\n19.6\n37\n0.0\n\n\n2024-03-12T21:00\n18.5\n20.8\n39\n0.0\n\n\n2024-03-12T22:00\n18.6\n20.5\n44\n0.0\n\n\n2024-03-12T23:00\n18.6\n20.4\n50\n0.0\n\n\n2024-03-13T00:00\n18.7\n20.9\n55\n0.0\n\n\n2024-03-13T01:00\n18.6\n20.4\n51\n0.0\n\n\n2024-03-13T02:00\n18.6\n19.3\n46\n0.0\n\n\n2024-03-13T03:00\n18.7\n19.6\n42\n0.0\n\n\n2024-03-13T04:00\n18.7\n19.6\n45\n0.0\n\n\n2024-03-13T05:00\n18.6\n19.5\n49\n0.0\n\n\n2024-03-13T06:00\n18.4\n19.3\n52\n0.1\n\n\n2024-03-13T07:00\n18.4\n19.4\n54\n0.0\n\n\n2024-03-13T08:00\n18.4\n19.4\n56\n0.0\n\n\n2024-03-13T09:00\n18.4\n19.4\n58\n0.0\n\n\n2024-03-13T10:00\n18.3\n19.3\n55\n0.0\n\n\n2024-03-13T11:00\n18.1\n19.0\n51\n0.0\n\n\n2024-03-13T12:00\n18.0\n18.9\n48\n0.0\n\n\n2024-03-13T13:00\n18.0\n18.8\n51\n0.1\n\n\n2024-03-13T14:00\n18.0\n18.7\n55\n0.1\n\n\n2024-03-13T15:00\n18.0\n18.8\n58\n0.1\n\n\n2024-03-13T16:00\n18.0\n18.8\n54\n0.1\n\n\n2024-03-13T17:00\n18.1\n18.8\n49\n0.1\n\n\n2024-03-13T18:00\n18.1\n18.9\n45\n0.1\n\n\n2024-03-13T19:00\n18.2\n19.1\n43\n0.0\n\n\n2024-03-13T20:00\n18.3\n19.8\n41\n0.0\n\n\n2024-03-13T21:00\n18.4\n21.0\n39\n0.0\n\n\n2024-03-13T22:00\n18.3\n21.6\n37\n0.0\n\n\n2024-03-13T23:00\n18.2\n21.8\n34\n0.0\n\n\n2024-03-14T00:00\n18.2\n21.6\n32\n0.0\n\n\n2024-03-14T01:00\n18.2\n21.0\n26\n0.0\n\n\n2024-03-14T02:00\n18.3\n19.9\n19\n0.0\n\n\n2024-03-14T03:00\n18.3\n19.8\n13\n0.0\n\n\n2024-03-14T04:00\n18.2\n19.8\n14\n0.0\n\n\n2024-03-14T05:00\n18.1\n19.7\n15\n0.0\n\n\n2024-03-14T06:00\n18.0\n19.6\n16\n0.0\n\n\n2024-03-14T07:00\n17.8\n19.4\n19\n0.2\n\n\n2024-03-14T08:00\n17.6\n19.2\n23\n0.2\n\n\n2024-03-14T09:00\n17.4\n19.1\n26\n0.2\n\n\n2024-03-14T10:00\n17.4\n19.0\n31\n0.0\n\n\n2024-03-14T11:00\n17.4\n18.9\n37\n0.0\n\n\n2024-03-14T12:00\n17.4\n18.7\n42\n0.0\n\n\n2024-03-14T13:00\n17.4\n18.7\n38\n0.0\n\n\n2024-03-14T14:00\n17.4\n18.7\n33\n0.0\n\n\n2024-03-14T15:00\n17.4\n18.7\n29\n0.0\n\n\n2024-03-14T16:00\n17.5\n18.7\n23\n0.0\n\n\n2024-03-14T17:00\n17.6\n18.8\n16\n0.0\n\n\n2024-03-14T18:00\n17.7\n18.8\n10\n0.0\n\n\n2024-03-14T19:00\n17.8\n18.9\n11\n0.0\n\n\n2024-03-14T20:00\n17.9\n19.7\n12\n0.0\n\n\n2024-03-14T21:00\n18.0\n20.9\n13\n0.0\n\n\n2024-03-14T22:00\n18.1\n21.7\n11\n0.0\n\n\n2024-03-14T23:00\n18.2\n21.8\n8\n0.0\n\n\n2024-03-15T00:00\n18.2\n21.5\n6\n0.0\n\n\n2024-03-15T01:00\n18.2\n20.6\n13\n0.0\n\n\n2024-03-15T02:00\n18.2\n19.4\n19\n0.0\n\n\n2024-03-15T03:00\n18.2\n19.1\n26\n0.0\n\n\n2024-03-15T04:00\n18.1\n19.1\n26\n0.0\n\n\n2024-03-15T05:00\n18.1\n19.1\n26\n0.0\n\n\n2024-03-15T06:00\n18.0\n19.0\n26\n0.0\n\n\n2024-03-15T07:00\n18.0\n19.0\n27\n0.0\n\n\n2024-03-15T08:00\n18.1\n18.9\n28\n0.0\n\n\n2024-03-15T09:00\n18.1\n18.7\n29\n0.0\n\n\n2024-03-15T10:00\n18.0\n18.6\n29\n0.0\n\n\n2024-03-15T11:00\n17.9\n18.4\n29\n0.0\n\n\n2024-03-15T12:00\n17.8\n18.3\n29\n0.0\n\n\n2024-03-15T13:00\n17.7\n18.2\n31\n0.0\n\n\n2024-03-15T14:00\n17.8\n18.3\n33\n0.0\n\n\n2024-03-15T15:00\n17.8\n18.3\n35\n0.0\n\n\n2024-03-15T16:00\n18.0\n18.4\n33\n0.0\n\n\n2024-03-15T17:00\n18.2\n18.5\n31\n0.0\n\n\n2024-03-15T18:00\n18.3\n18.6\n29\n0.0\n\n\n2024-03-15T19:00\n18.4\n18.7\n26\n0.0\n\n\n2024-03-15T20:00\n18.4\n19.7\n22\n0.0\n\n\n2024-03-15T21:00\n18.4\n20.7\n19\n0.0\n\n\n2024-03-15T22:00\n18.4\n21.3\n20\n0.0\n\n\n2024-03-15T23:00\n18.3\n21.3\n22\n0.0\n\n\n2024-03-16T00:00\n18.2\n20.9\n23\n0.0\n\n\n2024-03-16T01:00\n18.1\n20.1\n23\n0.0\n\n\n2024-03-16T02:00\n18.1\n19.0\n23\n0.0\n\n\n2024-03-16T03:00\n18.1\n19.1\n23\n0.0\n\n\n2024-03-16T04:00\n18.1\n19.1\n25\n0.0\n\n\n2024-03-16T05:00\n18.1\n19.4\n27\n0.0\n\n\n2024-03-16T06:00\n18.1\n19.4\n29\n0.0\n\n\n2024-03-16T07:00\n18.1\n19.3\n33\n0.0\n\n\n2024-03-16T08:00\n18.0\n19.1\n38\n0.0\n\n\n2024-03-16T09:00\n18.0\n19.1\n42\n0.0\n\n\n2024-03-16T10:00\n18.1\n19.1\n39\n0.0\n\n\n2024-03-16T11:00\n18.2\n19.2\n35\n0.0\n\n\n2024-03-16T12:00\n18.2\n19.2\n32\n0.0\n\n\n2024-03-16T13:00\n18.2\n19.2\n34\n0.0\n\n\n2024-03-16T14:00\n18.1\n19.2\n37\n0.0\n\n\n2024-03-16T15:00\n18.1\n19.3\n39\n0.0\n\n\n2024-03-16T16:00\n18.2\n19.3\n37\n0.0\n\n\n2024-03-16T17:00\n18.3\n19.4\n34\n0.0\n\n\n2024-03-16T18:00\n18.3\n19.4\n32\n0.0\n\n\n2024-03-16T19:00\n18.4\n19.4\n34\n0.0\n\n\n2024-03-16T20:00\n18.4\n19.4\n37\n0.0\n\n\n2024-03-16T21:00\n18.4\n20.2\n39\n0.0\n\n\n2024-03-16T22:00\n18.5\n20.9\n39\n0.0\n\n\n2024-03-16T23:00\n18.5\n21.5\n39\n0.0\n\n\n\n\n\n\n\n\n\nLes coordonnées GPS : 43.276703,5.334791\n\n\n\nCode\ncoord &lt;- get_forecast(c(43.276703,5.334791))\n\ngridExtra::grid.arrange(coord$graphs[[1]],coord$graphs[[2]],coord$graphs[[3]], ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\nLes données météo chiffrées des coordonnées : 43.276703,5.334791\n\n\n\n\n\n\n\nCode\ncoord$table\n\n\n\n\n\n\n\n\n\n\n\n\ndate_heure\ntemperature_celsius\ntemperature_ressentie_celsius\nchance_pluie\nquantite_pluie\n\n\n\n\n2024-03-10T00:00\n12.5\n4.7\n100\n1.4\n\n\n2024-03-10T01:00\n12.4\n6.0\n100\n4.2\n\n\n2024-03-10T02:00\n12.6\n8.2\n100\n1.6\n\n\n2024-03-10T03:00\n12.4\n8.6\n100\n0.0\n\n\n2024-03-10T04:00\n13.1\n8.6\n100\n0.0\n\n\n2024-03-10T05:00\n13.3\n8.2\n100\n0.0\n\n\n2024-03-10T06:00\n13.1\n9.2\n100\n0.0\n\n\n2024-03-10T07:00\n13.4\n9.4\n88\n0.0\n\n\n2024-03-10T08:00\n13.4\n9.9\n77\n0.0\n\n\n2024-03-10T09:00\n13.3\n10.5\n65\n0.0\n\n\n2024-03-10T10:00\n13.0\n10.0\n47\n0.0\n\n\n2024-03-10T11:00\n13.0\n8.8\n28\n0.0\n\n\n2024-03-10T12:00\n12.8\n8.5\n10\n0.0\n\n\n2024-03-10T13:00\n12.9\n8.2\n7\n0.0\n\n\n2024-03-10T14:00\n13.1\n9.5\n3\n0.0\n\n\n2024-03-10T15:00\n13.4\n8.9\n0\n0.0\n\n\n2024-03-10T16:00\n13.6\n9.8\n3\n0.0\n\n\n2024-03-10T17:00\n13.6\n9.7\n7\n0.0\n\n\n2024-03-10T18:00\n13.6\n10.1\n10\n0.0\n\n\n2024-03-10T19:00\n13.5\n10.4\n26\n0.0\n\n\n2024-03-10T20:00\n13.5\n10.2\n42\n0.0\n\n\n2024-03-10T21:00\n13.5\n10.3\n58\n0.0\n\n\n2024-03-10T22:00\n13.5\n10.8\n62\n0.0\n\n\n2024-03-10T23:00\n13.4\n11.2\n67\n0.0\n\n\n2024-03-11T00:00\n13.4\n11.4\n71\n0.0\n\n\n2024-03-11T01:00\n13.2\n10.6\n69\n0.0\n\n\n2024-03-11T02:00\n12.8\n10.6\n67\n0.0\n\n\n2024-03-11T03:00\n12.1\n9.9\n65\n0.0\n\n\n2024-03-11T04:00\n11.6\n8.1\n58\n0.0\n\n\n2024-03-11T05:00\n11.5\n8.3\n52\n0.0\n\n\n2024-03-11T06:00\n11.6\n8.6\n45\n0.0\n\n\n2024-03-11T07:00\n11.4\n8.5\n42\n0.5\n\n\n2024-03-11T08:00\n10.2\n5.8\n38\n0.7\n\n\n2024-03-11T09:00\n10.7\n5.6\n35\n0.1\n\n\n2024-03-11T10:00\n10.9\n7.4\n24\n0.0\n\n\n2024-03-11T11:00\n11.7\n7.8\n14\n0.0\n\n\n2024-03-11T12:00\n12.9\n9.0\n3\n0.0\n\n\n2024-03-11T13:00\n13.4\n8.8\n4\n0.0\n\n\n2024-03-11T14:00\n14.1\n9.2\n5\n0.0\n\n\n2024-03-11T15:00\n13.4\n7.0\n6\n0.0\n\n\n2024-03-11T16:00\n13.1\n6.5\n8\n0.0\n\n\n2024-03-11T17:00\n13.3\n7.1\n11\n0.0\n\n\n2024-03-11T18:00\n13.1\n7.3\n13\n0.0\n\n\n2024-03-11T19:00\n12.7\n7.6\n10\n0.0\n\n\n2024-03-11T20:00\n12.1\n7.5\n6\n0.0\n\n\n2024-03-11T21:00\n11.8\n6.4\n3\n0.0\n\n\n2024-03-11T22:00\n11.1\n4.5\n2\n0.0\n\n\n2024-03-11T23:00\n10.4\n4.6\n1\n0.0\n\n\n2024-03-12T00:00\n10.1\n4.4\n0\n0.0\n\n\n2024-03-12T01:00\n10.4\n3.8\n0\n0.0\n\n\n2024-03-12T02:00\n10.9\n3.3\n0\n0.0\n\n\n2024-03-12T03:00\n10.4\n2.2\n0\n0.0\n\n\n2024-03-12T04:00\n10.1\n2.8\n0\n0.0\n\n\n2024-03-12T05:00\n10.4\n3.5\n0\n0.0\n\n\n2024-03-12T06:00\n9.9\n3.1\n0\n0.0\n\n\n2024-03-12T07:00\n8.8\n3.1\n0\n0.0\n\n\n2024-03-12T08:00\n9.5\n3.7\n0\n0.0\n\n\n2024-03-12T09:00\n10.7\n4.5\n0\n0.0\n\n\n2024-03-12T10:00\n11.5\n4.7\n0\n0.0\n\n\n2024-03-12T11:00\n12.1\n5.2\n0\n0.0\n\n\n2024-03-12T12:00\n12.5\n5.6\n0\n0.0\n\n\n2024-03-12T13:00\n12.9\n6.5\n0\n0.0\n\n\n2024-03-12T14:00\n13.0\n7.0\n0\n0.0\n\n\n2024-03-12T15:00\n12.9\n6.6\n0\n0.0\n\n\n2024-03-12T16:00\n12.4\n6.2\n0\n0.0\n\n\n2024-03-12T17:00\n11.9\n5.6\n0\n0.0\n\n\n2024-03-12T18:00\n11.6\n5.2\n0\n0.0\n\n\n2024-03-12T19:00\n11.2\n4.9\n0\n0.0\n\n\n2024-03-12T20:00\n10.8\n4.7\n0\n0.0\n\n\n2024-03-12T21:00\n10.3\n4.8\n0\n0.0\n\n\n2024-03-12T22:00\n9.9\n4.5\n0\n0.0\n\n\n2024-03-12T23:00\n9.7\n4.2\n0\n0.0\n\n\n2024-03-13T00:00\n9.5\n4.0\n0\n0.0\n\n\n2024-03-13T01:00\n9.3\n3.7\n0\n0.0\n\n\n2024-03-13T02:00\n9.0\n3.6\n0\n0.0\n\n\n2024-03-13T03:00\n8.6\n3.8\n0\n0.0\n\n\n2024-03-13T04:00\n8.1\n4.5\n0\n0.0\n\n\n2024-03-13T05:00\n7.7\n4.3\n0\n0.0\n\n\n2024-03-13T06:00\n7.1\n4.4\n0\n0.0\n\n\n2024-03-13T07:00\n7.0\n4.3\n0\n0.0\n\n\n2024-03-13T08:00\n7.9\n5.6\n0\n0.0\n\n\n2024-03-13T09:00\n9.6\n7.5\n0\n0.0\n\n\n2024-03-13T10:00\n11.6\n10.5\n0\n0.0\n\n\n2024-03-13T11:00\n13.2\n13.6\n0\n0.0\n\n\n2024-03-13T12:00\n14.3\n15.4\n0\n0.0\n\n\n2024-03-13T13:00\n15.3\n16.2\n0\n0.0\n\n\n2024-03-13T14:00\n16.1\n16.6\n0\n0.0\n\n\n2024-03-13T15:00\n16.6\n16.1\n0\n0.0\n\n\n2024-03-13T16:00\n16.5\n15.9\n0\n0.0\n\n\n2024-03-13T17:00\n15.4\n15.0\n0\n0.0\n\n\n2024-03-13T18:00\n13.0\n12.1\n0\n0.0\n\n\n2024-03-13T19:00\n11.3\n10.2\n0\n0.0\n\n\n2024-03-13T20:00\n10.4\n9.1\n0\n0.0\n\n\n2024-03-13T21:00\n9.8\n8.4\n0\n0.0\n\n\n2024-03-13T22:00\n9.3\n7.8\n1\n0.0\n\n\n2024-03-13T23:00\n8.9\n7.3\n2\n0.0\n\n\n2024-03-14T00:00\n8.5\n6.8\n3\n0.0\n\n\n2024-03-14T01:00\n8.4\n6.6\n3\n0.0\n\n\n2024-03-14T02:00\n8.2\n6.2\n3\n0.0\n\n\n2024-03-14T03:00\n8.0\n6.1\n3\n0.0\n\n\n2024-03-14T04:00\n7.6\n5.6\n3\n0.0\n\n\n2024-03-14T05:00\n7.4\n5.3\n3\n0.0\n\n\n2024-03-14T06:00\n7.5\n5.5\n3\n0.0\n\n\n2024-03-14T07:00\n7.7\n5.3\n3\n0.0\n\n\n2024-03-14T08:00\n11.0\n9.0\n3\n0.0\n\n\n2024-03-14T09:00\n13.6\n11.9\n3\n0.0\n\n\n2024-03-14T10:00\n15.0\n13.0\n3\n0.0\n\n\n2024-03-14T11:00\n15.7\n13.6\n3\n0.0\n\n\n2024-03-14T12:00\n16.1\n13.8\n3\n0.0\n\n\n2024-03-14T13:00\n16.1\n13.7\n3\n0.0\n\n\n2024-03-14T14:00\n15.7\n13.0\n3\n0.0\n\n\n2024-03-14T15:00\n15.1\n12.4\n3\n0.0\n\n\n2024-03-14T16:00\n14.3\n11.9\n2\n0.0\n\n\n2024-03-14T17:00\n13.3\n11.1\n1\n0.0\n\n\n2024-03-14T18:00\n12.4\n10.5\n0\n0.0\n\n\n2024-03-14T19:00\n11.6\n10.2\n0\n0.0\n\n\n2024-03-14T20:00\n10.9\n9.7\n0\n0.0\n\n\n2024-03-14T21:00\n10.3\n9.1\n0\n0.0\n\n\n2024-03-14T22:00\n9.9\n8.5\n0\n0.0\n\n\n2024-03-14T23:00\n9.6\n8.0\n0\n0.0\n\n\n2024-03-15T00:00\n9.4\n7.8\n0\n0.0\n\n\n2024-03-15T01:00\n9.3\n7.6\n0\n0.0\n\n\n2024-03-15T02:00\n9.3\n7.6\n0\n0.0\n\n\n2024-03-15T03:00\n9.2\n7.5\n0\n0.0\n\n\n2024-03-15T04:00\n9.0\n7.2\n0\n0.0\n\n\n2024-03-15T05:00\n8.7\n6.7\n0\n0.0\n\n\n2024-03-15T06:00\n8.9\n7.0\n0\n0.0\n\n\n2024-03-15T07:00\n9.9\n8.3\n0\n0.0\n\n\n2024-03-15T08:00\n11.4\n10.2\n0\n0.0\n\n\n2024-03-15T09:00\n12.7\n11.7\n0\n0.0\n\n\n2024-03-15T10:00\n13.3\n12.5\n0\n0.3\n\n\n2024-03-15T11:00\n13.6\n13.1\n0\n0.3\n\n\n2024-03-15T12:00\n14.0\n13.4\n0\n0.3\n\n\n2024-03-15T13:00\n14.6\n13.6\n0\n0.0\n\n\n2024-03-15T14:00\n15.3\n13.6\n0\n0.0\n\n\n2024-03-15T15:00\n15.6\n13.5\n0\n0.0\n\n\n2024-03-15T16:00\n15.4\n13.4\n0\n0.0\n\n\n2024-03-15T17:00\n14.8\n13.2\n0\n0.0\n\n\n2024-03-15T18:00\n14.1\n12.9\n0\n0.0\n\n\n2024-03-15T19:00\n13.3\n12.6\n0\n0.0\n\n\n2024-03-15T20:00\n12.4\n12.0\n0\n0.0\n\n\n2024-03-15T21:00\n11.6\n11.3\n0\n0.0\n\n\n2024-03-15T22:00\n11.0\n10.5\n0\n0.0\n\n\n2024-03-15T23:00\n10.4\n9.8\n0\n0.0\n\n\n2024-03-16T00:00\n10.1\n9.2\n0\n0.0\n\n\n2024-03-16T01:00\n9.9\n8.9\n0\n0.0\n\n\n2024-03-16T02:00\n9.9\n8.6\n0\n0.0\n\n\n2024-03-16T03:00\n9.8\n8.4\n0\n0.0\n\n\n2024-03-16T04:00\n9.3\n7.9\n0\n0.0\n\n\n2024-03-16T05:00\n8.7\n7.4\n0\n0.0\n\n\n2024-03-16T06:00\n8.9\n7.6\n0\n0.0\n\n\n2024-03-16T07:00\n10.4\n9.0\n0\n0.0\n\n\n2024-03-16T08:00\n12.6\n11.1\n0\n0.0\n\n\n2024-03-16T09:00\n14.6\n12.9\n0\n0.0\n\n\n2024-03-16T10:00\n16.2\n14.0\n0\n0.0\n\n\n2024-03-16T11:00\n17.7\n15.2\n0\n0.0\n\n\n2024-03-16T12:00\n18.8\n16.1\n0\n0.0\n\n\n2024-03-16T13:00\n19.5\n16.7\n0\n0.0\n\n\n2024-03-16T14:00\n19.9\n16.9\n0\n0.0\n\n\n2024-03-16T15:00\n19.8\n16.9\n0\n0.0\n\n\n2024-03-16T16:00\n19.0\n16.9\n0\n0.0\n\n\n2024-03-16T17:00\n17.7\n16.4\n0\n0.0\n\n\n2024-03-16T18:00\n16.4\n15.7\n0\n0.0\n\n\n2024-03-16T19:00\n15.1\n14.7\n2\n0.0\n\n\n2024-03-16T20:00\n13.9\n13.6\n4\n0.0\n\n\n2024-03-16T21:00\n12.9\n12.8\n6\n0.0\n\n\n2024-03-16T22:00\n12.4\n12.5\n6\n0.0\n\n\n2024-03-16T23:00\n12.1\n12.1\n6\n0.0"
  },
  {
    "objectID": "posts/librairie_olympicsWeather/index.html#librairie-olympicsweather",
    "href": "posts/librairie_olympicsWeather/index.html#librairie-olympicsweather",
    "title": "Librairie olympicsWeather",
    "section": "",
    "text": "Le package olympicsWeather a pour objectif d’informer sur les prévisions météo des sites olympiques. La fonction get_forecast comprise à l’intérieur de cette librairie vous permettra de connaître les prévisions, relatives aux températures et à la pluie estimées, à partir d’une adresse ou de coordonnées gps. Ces dernières font référence à des sites olympiques.\n\n\n\nActuellement, la librairie olympicsWeather est stockée sur un dépôt GitHub, aussi afin de l’utiliser, il est nécessaire de l’importer et de l’installer dans votre environnement R. Voici donc les étapes à suivre sur R Studio afin d’y parvenir. Dans un premier temps, il est nécessaire d’avoir installé la librairie “remotes” depuis le CRAN. La seconde étape consiste à utiliser la fonction install_github de “remotes”. Elle permet d’installer la librairie olympisWeather depuis le dépôt GitHub sur votre environnement R. Désormais, vous pouvez appeler ce package et l’utiliser à votre guise.\nVoici le code à exécuter pour parvenir à cet objectif :\nEtape 1 :\n\ninstall.packages(\"remotes\")\n\nEtape 2 :\n\nremotes::install_github(\"mariekrh/olympicsWeather\")\n\nEtape 3 :\n\nlibrary(olympicsWeather)\n\n\n\n\nQuelles sont les prévisions météo à 7 jours pour les lieux suivants ?\n\nStade de France\n\n\n\nCode\nSdF &lt;- get_forecast(\"stade de France\")\n\ngridExtra::grid.arrange(SdF$graphs[[1]],SdF$graphs[[2]],SdF$graphs[[3]],ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\nLes données météo chiffrées du Stade de France\n\n\n\n\n\n\n\nCode\nSdF$table\n\n\n\n\n\n\n\n\n\n\n\n\ndate_heure\ntemperature_celsius\ntemperature_ressentie_celsius\nchance_pluie\nquantite_pluie\n\n\n\n\n2024-03-10T00:00\n8.0\n6.2\n32\n0.0\n\n\n2024-03-10T01:00\n8.0\n5.4\n27\n0.0\n\n\n2024-03-10T02:00\n7.8\n5.4\n21\n0.2\n\n\n2024-03-10T03:00\n7.9\n5.9\n16\n0.1\n\n\n2024-03-10T04:00\n7.5\n5.6\n21\n0.0\n\n\n2024-03-10T05:00\n7.5\n5.8\n27\n0.0\n\n\n2024-03-10T06:00\n7.5\n5.5\n32\n0.1\n\n\n2024-03-10T07:00\n7.4\n5.8\n32\n0.2\n\n\n2024-03-10T08:00\n7.4\n5.0\n32\n1.7\n\n\n2024-03-10T09:00\n7.5\n5.4\n32\n0.4\n\n\n2024-03-10T10:00\n8.2\n6.3\n32\n0.2\n\n\n2024-03-10T11:00\n8.9\n7.0\n32\n0.0\n\n\n2024-03-10T12:00\n9.6\n7.7\n32\n0.0\n\n\n2024-03-10T13:00\n10.2\n8.2\n32\n0.0\n\n\n2024-03-10T14:00\n10.7\n8.5\n32\n0.0\n\n\n2024-03-10T15:00\n11.1\n8.8\n32\n0.0\n\n\n2024-03-10T16:00\n11.1\n8.7\n31\n0.0\n\n\n2024-03-10T17:00\n10.7\n8.4\n30\n0.0\n\n\n2024-03-10T18:00\n10.0\n8.3\n29\n0.0\n\n\n2024-03-10T19:00\n9.0\n7.4\n30\n0.0\n\n\n2024-03-10T20:00\n8.3\n6.8\n31\n0.0\n\n\n2024-03-10T21:00\n7.6\n5.9\n32\n0.0\n\n\n2024-03-10T22:00\n7.0\n5.5\n23\n0.0\n\n\n2024-03-10T23:00\n6.6\n4.9\n15\n0.0\n\n\n2024-03-11T00:00\n6.2\n4.5\n6\n0.0\n\n\n2024-03-11T01:00\n5.8\n3.9\n6\n0.0\n\n\n2024-03-11T02:00\n5.3\n3.3\n6\n0.0\n\n\n2024-03-11T03:00\n5.0\n3.0\n6\n0.0\n\n\n2024-03-11T04:00\n4.9\n2.8\n6\n0.0\n\n\n2024-03-11T05:00\n4.6\n2.4\n6\n0.0\n\n\n2024-03-11T06:00\n4.5\n2.4\n6\n0.0\n\n\n2024-03-11T07:00\n4.6\n2.5\n7\n0.0\n\n\n2024-03-11T08:00\n5.8\n3.9\n9\n0.0\n\n\n2024-03-11T09:00\n8.0\n5.8\n10\n0.0\n\n\n2024-03-11T10:00\n10.0\n7.4\n13\n0.0\n\n\n2024-03-11T11:00\n11.7\n9.0\n16\n0.0\n\n\n2024-03-11T12:00\n12.7\n9.0\n19\n0.0\n\n\n2024-03-11T13:00\n13.2\n9.8\n32\n0.0\n\n\n2024-03-11T14:00\n13.6\n10.6\n45\n0.0\n\n\n2024-03-11T15:00\n12.8\n9.8\n58\n0.1\n\n\n2024-03-11T16:00\n12.5\n9.6\n52\n0.0\n\n\n2024-03-11T17:00\n12.2\n9.7\n45\n0.0\n\n\n2024-03-11T18:00\n11.4\n9.1\n39\n0.0\n\n\n2024-03-11T19:00\n10.4\n8.5\n27\n0.4\n\n\n2024-03-11T20:00\n9.7\n8.1\n15\n0.6\n\n\n2024-03-11T21:00\n9.4\n7.5\n3\n0.2\n\n\n2024-03-11T22:00\n9.0\n6.9\n5\n0.0\n\n\n2024-03-11T23:00\n8.6\n6.2\n8\n0.0\n\n\n2024-03-12T00:00\n8.3\n6.2\n10\n0.2\n\n\n2024-03-12T01:00\n8.2\n6.0\n12\n0.0\n\n\n2024-03-12T02:00\n8.0\n5.8\n14\n0.0\n\n\n2024-03-12T03:00\n7.8\n5.4\n16\n0.0\n\n\n2024-03-12T04:00\n7.4\n5.2\n16\n0.0\n\n\n2024-03-12T05:00\n6.9\n4.7\n16\n0.0\n\n\n2024-03-12T06:00\n6.7\n4.5\n16\n0.0\n\n\n2024-03-12T07:00\n7.2\n5.3\n14\n0.2\n\n\n2024-03-12T08:00\n7.7\n5.5\n12\n0.2\n\n\n2024-03-12T09:00\n9.2\n6.4\n10\n0.0\n\n\n2024-03-12T10:00\n10.2\n7.2\n15\n0.0\n\n\n2024-03-12T11:00\n11.0\n7.9\n21\n0.0\n\n\n2024-03-12T12:00\n11.4\n8.0\n26\n0.0\n\n\n2024-03-12T13:00\n11.0\n8.2\n32\n0.2\n\n\n2024-03-12T14:00\n11.2\n8.5\n39\n0.1\n\n\n2024-03-12T15:00\n10.6\n7.9\n45\n0.3\n\n\n2024-03-12T16:00\n10.4\n8.1\n42\n0.3\n\n\n2024-03-12T17:00\n10.1\n8.0\n38\n0.6\n\n\n2024-03-12T18:00\n9.8\n8.0\n35\n0.3\n\n\n2024-03-12T19:00\n9.6\n8.0\n31\n0.4\n\n\n2024-03-12T20:00\n9.7\n8.2\n27\n0.5\n\n\n2024-03-12T21:00\n9.7\n8.4\n23\n0.0\n\n\n2024-03-12T22:00\n9.7\n8.5\n20\n0.0\n\n\n2024-03-12T23:00\n9.5\n8.3\n16\n0.0\n\n\n2024-03-13T00:00\n9.4\n8.3\n13\n0.0\n\n\n2024-03-13T01:00\n9.3\n8.3\n11\n0.0\n\n\n2024-03-13T02:00\n9.2\n8.2\n8\n0.0\n\n\n2024-03-13T03:00\n9.0\n7.9\n6\n0.0\n\n\n2024-03-13T04:00\n8.9\n7.8\n6\n0.0\n\n\n2024-03-13T05:00\n8.8\n7.7\n6\n0.0\n\n\n2024-03-13T06:00\n8.7\n7.7\n6\n0.0\n\n\n2024-03-13T07:00\n9.2\n8.2\n4\n0.0\n\n\n2024-03-13T08:00\n9.9\n8.8\n2\n0.0\n\n\n2024-03-13T09:00\n10.8\n9.6\n0\n0.0\n\n\n2024-03-13T10:00\n11.8\n10.4\n1\n0.0\n\n\n2024-03-13T11:00\n12.9\n11.4\n2\n0.0\n\n\n2024-03-13T12:00\n13.9\n12.2\n3\n0.0\n\n\n2024-03-13T13:00\n14.7\n12.9\n3\n0.0\n\n\n2024-03-13T14:00\n15.3\n13.5\n3\n0.0\n\n\n2024-03-13T15:00\n15.6\n13.9\n3\n0.0\n\n\n2024-03-13T16:00\n15.3\n13.9\n2\n0.0\n\n\n2024-03-13T17:00\n14.6\n13.5\n1\n0.0\n\n\n2024-03-13T18:00\n13.8\n12.8\n0\n0.0\n\n\n2024-03-13T19:00\n12.8\n11.8\n0\n0.0\n\n\n2024-03-13T20:00\n11.6\n10.6\n0\n0.0\n\n\n2024-03-13T21:00\n10.6\n9.6\n0\n0.0\n\n\n2024-03-13T22:00\n9.9\n8.8\n0\n0.0\n\n\n2024-03-13T23:00\n9.4\n8.2\n0\n0.0\n\n\n2024-03-14T00:00\n9.0\n7.7\n0\n0.0\n\n\n2024-03-14T01:00\n8.6\n7.2\n0\n0.0\n\n\n2024-03-14T02:00\n8.3\n6.8\n0\n0.0\n\n\n2024-03-14T03:00\n8.0\n6.4\n0\n0.0\n\n\n2024-03-14T04:00\n7.5\n6.0\n0\n0.0\n\n\n2024-03-14T05:00\n7.1\n5.5\n0\n0.0\n\n\n2024-03-14T06:00\n7.1\n5.4\n0\n0.0\n\n\n2024-03-14T07:00\n7.8\n6.0\n0\n0.0\n\n\n2024-03-14T08:00\n9.1\n7.0\n0\n0.0\n\n\n2024-03-14T09:00\n10.5\n8.3\n0\n0.0\n\n\n2024-03-14T10:00\n12.1\n10.0\n0\n0.0\n\n\n2024-03-14T11:00\n13.8\n11.9\n0\n0.0\n\n\n2024-03-14T12:00\n15.2\n13.5\n0\n0.0\n\n\n2024-03-14T13:00\n16.1\n14.2\n0\n0.0\n\n\n2024-03-14T14:00\n16.8\n14.7\n0\n0.0\n\n\n2024-03-14T15:00\n17.0\n14.9\n0\n0.0\n\n\n2024-03-14T16:00\n16.7\n14.6\n0\n0.0\n\n\n2024-03-14T17:00\n16.0\n14.0\n0\n0.0\n\n\n2024-03-14T18:00\n15.3\n13.4\n0\n0.0\n\n\n2024-03-14T19:00\n14.5\n12.9\n0\n0.0\n\n\n2024-03-14T20:00\n13.7\n12.3\n0\n0.0\n\n\n2024-03-14T21:00\n13.0\n11.8\n0\n0.0\n\n\n2024-03-14T22:00\n12.5\n11.4\n0\n0.1\n\n\n2024-03-14T23:00\n12.2\n11.2\n0\n0.1\n\n\n2024-03-15T00:00\n12.0\n11.0\n0\n0.1\n\n\n2024-03-15T01:00\n12.0\n10.8\n3\n0.4\n\n\n2024-03-15T02:00\n11.9\n10.6\n7\n0.4\n\n\n2024-03-15T03:00\n11.7\n10.3\n10\n0.4\n\n\n2024-03-15T04:00\n11.4\n9.9\n12\n0.1\n\n\n2024-03-15T05:00\n11.2\n9.4\n14\n0.1\n\n\n2024-03-15T06:00\n11.2\n9.2\n16\n0.1\n\n\n2024-03-15T07:00\n11.5\n9.4\n19\n0.2\n\n\n2024-03-15T08:00\n12.0\n9.5\n23\n0.2\n\n\n2024-03-15T09:00\n12.7\n10.0\n26\n0.2\n\n\n2024-03-15T10:00\n13.6\n11.0\n27\n0.3\n\n\n2024-03-15T11:00\n14.6\n12.1\n28\n0.3\n\n\n2024-03-15T12:00\n15.3\n12.9\n29\n0.3\n\n\n2024-03-15T13:00\n15.4\n13.1\n29\n0.8\n\n\n2024-03-15T14:00\n15.1\n12.9\n29\n0.8\n\n\n2024-03-15T15:00\n14.7\n12.7\n29\n0.8\n\n\n2024-03-15T16:00\n14.4\n12.5\n29\n0.3\n\n\n2024-03-15T17:00\n13.9\n12.2\n29\n0.3\n\n\n2024-03-15T18:00\n13.4\n11.8\n29\n0.3\n\n\n2024-03-15T19:00\n12.9\n11.2\n33\n0.1\n\n\n2024-03-15T20:00\n12.4\n10.6\n38\n0.1\n\n\n2024-03-15T21:00\n12.0\n10.0\n42\n0.1\n\n\n2024-03-15T22:00\n11.7\n9.7\n32\n0.1\n\n\n2024-03-15T23:00\n11.6\n9.5\n23\n0.1\n\n\n2024-03-16T00:00\n11.4\n9.3\n13\n0.1\n\n\n2024-03-16T01:00\n11.3\n9.3\n13\n0.0\n\n\n2024-03-16T02:00\n11.2\n9.4\n13\n0.0\n\n\n2024-03-16T03:00\n11.0\n9.4\n13\n0.0\n\n\n2024-03-16T04:00\n10.7\n9.1\n14\n0.0\n\n\n2024-03-16T05:00\n10.4\n8.6\n15\n0.0\n\n\n2024-03-16T06:00\n10.4\n8.6\n16\n0.0\n\n\n2024-03-16T07:00\n11.0\n9.0\n17\n0.0\n\n\n2024-03-16T08:00\n11.9\n9.6\n18\n0.0\n\n\n2024-03-16T09:00\n12.7\n10.4\n19\n0.0\n\n\n2024-03-16T10:00\n13.3\n11.1\n21\n0.0\n\n\n2024-03-16T11:00\n13.8\n11.9\n24\n0.0\n\n\n2024-03-16T12:00\n14.2\n12.6\n26\n0.0\n\n\n2024-03-16T13:00\n14.4\n13.1\n30\n0.4\n\n\n2024-03-16T14:00\n14.6\n13.5\n35\n0.4\n\n\n2024-03-16T15:00\n14.7\n13.8\n39\n0.4\n\n\n2024-03-16T16:00\n14.8\n14.0\n44\n0.0\n\n\n2024-03-16T17:00\n14.8\n14.2\n50\n0.0\n\n\n2024-03-16T18:00\n14.6\n14.2\n55\n0.0\n\n\n2024-03-16T19:00\n14.2\n13.7\n51\n0.0\n\n\n2024-03-16T20:00\n13.7\n13.0\n46\n0.0\n\n\n2024-03-16T21:00\n13.3\n12.5\n42\n0.0\n\n\n2024-03-16T22:00\n13.0\n12.2\n42\n0.2\n\n\n2024-03-16T23:00\n12.7\n11.9\n42\n0.2\n\n\n\n\n\n\n\n\n\nTahiti\n\n\n\nCode\nTah &lt;- get_forecast(\"Tahiti\")\n\ngridExtra::grid.arrange(Tah$graphs[[1]],Tah$graphs[[2]],Tah$graphs[[3]], ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\nLes données météo chiffrées de Tahiti\n\n\n\n\n\n\n\nCode\nTah$table\n\n\n\n\n\n\n\n\n\n\n\n\ndate_heure\ntemperature_celsius\ntemperature_ressentie_celsius\nchance_pluie\nquantite_pluie\n\n\n\n\n2024-03-10T00:00\n17.1\n19.4\n100\n0.1\n\n\n2024-03-10T01:00\n16.9\n18.5\n100\n0.3\n\n\n2024-03-10T02:00\n16.8\n18.6\n100\n1.3\n\n\n2024-03-10T03:00\n16.7\n18.5\n100\n2.3\n\n\n2024-03-10T04:00\n16.7\n18.1\n100\n2.0\n\n\n2024-03-10T05:00\n16.9\n18.2\n100\n1.1\n\n\n2024-03-10T06:00\n17.1\n18.8\n100\n0.0\n\n\n2024-03-10T07:00\n17.1\n18.4\n99\n0.0\n\n\n2024-03-10T08:00\n17.1\n18.5\n98\n0.3\n\n\n2024-03-10T09:00\n17.1\n18.6\n97\n0.1\n\n\n2024-03-10T10:00\n17.1\n18.7\n93\n0.0\n\n\n2024-03-10T11:00\n17.2\n18.6\n88\n0.0\n\n\n2024-03-10T12:00\n17.3\n18.8\n84\n0.0\n\n\n2024-03-10T13:00\n17.1\n18.6\n70\n0.0\n\n\n2024-03-10T14:00\n17.1\n18.7\n56\n0.1\n\n\n2024-03-10T15:00\n17.1\n18.6\n42\n0.1\n\n\n2024-03-10T16:00\n17.1\n18.7\n54\n0.0\n\n\n2024-03-10T17:00\n17.1\n18.6\n65\n0.0\n\n\n2024-03-10T18:00\n17.0\n18.5\n77\n0.1\n\n\n2024-03-10T19:00\n16.9\n18.5\n70\n0.1\n\n\n2024-03-10T20:00\n16.8\n18.6\n62\n0.2\n\n\n2024-03-10T21:00\n16.8\n20.0\n55\n0.1\n\n\n2024-03-10T22:00\n17.0\n20.1\n66\n0.0\n\n\n2024-03-10T23:00\n17.0\n20.5\n76\n0.2\n\n\n2024-03-11T00:00\n17.0\n19.8\n87\n0.2\n\n\n2024-03-11T01:00\n17.0\n19.6\n85\n0.1\n\n\n2024-03-11T02:00\n17.2\n18.7\n83\n0.0\n\n\n2024-03-11T03:00\n17.2\n18.6\n81\n0.1\n\n\n2024-03-11T04:00\n17.2\n18.7\n79\n0.1\n\n\n2024-03-11T05:00\n17.2\n18.9\n76\n0.0\n\n\n2024-03-11T06:00\n17.1\n18.6\n74\n0.1\n\n\n2024-03-11T07:00\n17.1\n18.6\n76\n0.2\n\n\n2024-03-11T08:00\n16.9\n18.5\n79\n1.3\n\n\n2024-03-11T09:00\n17.4\n18.2\n81\n0.5\n\n\n2024-03-11T10:00\n17.1\n18.3\n72\n0.5\n\n\n2024-03-11T11:00\n16.9\n18.1\n64\n2.1\n\n\n2024-03-11T12:00\n17.0\n18.3\n55\n1.3\n\n\n2024-03-11T13:00\n17.0\n18.3\n65\n0.1\n\n\n2024-03-11T14:00\n17.0\n18.2\n74\n0.2\n\n\n2024-03-11T15:00\n17.3\n18.7\n84\n0.0\n\n\n2024-03-11T16:00\n17.5\n18.8\n80\n0.0\n\n\n2024-03-11T17:00\n17.6\n19.1\n75\n0.0\n\n\n2024-03-11T18:00\n17.7\n19.1\n71\n0.0\n\n\n2024-03-11T19:00\n17.9\n19.0\n67\n0.0\n\n\n2024-03-11T20:00\n17.7\n19.6\n62\n0.1\n\n\n2024-03-11T21:00\n17.6\n20.1\n58\n0.1\n\n\n2024-03-11T22:00\n17.8\n20.9\n58\n0.1\n\n\n2024-03-11T23:00\n17.8\n21.2\n58\n0.1\n\n\n2024-03-12T00:00\n17.8\n20.5\n58\n0.1\n\n\n2024-03-12T01:00\n17.6\n19.4\n58\n0.2\n\n\n2024-03-12T02:00\n17.2\n18.7\n58\n0.5\n\n\n2024-03-12T03:00\n17.2\n19.0\n58\n0.4\n\n\n2024-03-12T04:00\n17.0\n18.8\n53\n0.2\n\n\n2024-03-12T05:00\n17.0\n18.7\n47\n0.2\n\n\n2024-03-12T06:00\n17.2\n18.6\n42\n0.1\n\n\n2024-03-12T07:00\n17.4\n18.9\n47\n0.0\n\n\n2024-03-12T08:00\n17.6\n18.9\n53\n0.0\n\n\n2024-03-12T09:00\n17.8\n19.0\n58\n0.0\n\n\n2024-03-12T10:00\n17.8\n18.8\n58\n0.0\n\n\n2024-03-12T11:00\n17.8\n18.8\n58\n0.0\n\n\n2024-03-12T12:00\n17.7\n18.9\n58\n0.0\n\n\n2024-03-12T13:00\n17.7\n18.8\n54\n0.0\n\n\n2024-03-12T14:00\n17.7\n18.8\n49\n0.0\n\n\n2024-03-12T15:00\n17.8\n19.0\n45\n0.0\n\n\n2024-03-12T16:00\n17.8\n18.8\n41\n0.0\n\n\n2024-03-12T17:00\n17.9\n18.9\n36\n0.0\n\n\n2024-03-12T18:00\n18.1\n18.9\n32\n0.0\n\n\n2024-03-12T19:00\n18.2\n18.8\n34\n0.0\n\n\n2024-03-12T20:00\n18.4\n19.6\n37\n0.0\n\n\n2024-03-12T21:00\n18.5\n20.8\n39\n0.0\n\n\n2024-03-12T22:00\n18.6\n20.5\n44\n0.0\n\n\n2024-03-12T23:00\n18.6\n20.4\n50\n0.0\n\n\n2024-03-13T00:00\n18.7\n20.9\n55\n0.0\n\n\n2024-03-13T01:00\n18.6\n20.4\n51\n0.0\n\n\n2024-03-13T02:00\n18.6\n19.3\n46\n0.0\n\n\n2024-03-13T03:00\n18.7\n19.6\n42\n0.0\n\n\n2024-03-13T04:00\n18.7\n19.6\n45\n0.0\n\n\n2024-03-13T05:00\n18.6\n19.5\n49\n0.0\n\n\n2024-03-13T06:00\n18.4\n19.3\n52\n0.1\n\n\n2024-03-13T07:00\n18.4\n19.4\n54\n0.0\n\n\n2024-03-13T08:00\n18.4\n19.4\n56\n0.0\n\n\n2024-03-13T09:00\n18.4\n19.4\n58\n0.0\n\n\n2024-03-13T10:00\n18.3\n19.3\n55\n0.0\n\n\n2024-03-13T11:00\n18.1\n19.0\n51\n0.0\n\n\n2024-03-13T12:00\n18.0\n18.9\n48\n0.0\n\n\n2024-03-13T13:00\n18.0\n18.8\n51\n0.1\n\n\n2024-03-13T14:00\n18.0\n18.7\n55\n0.1\n\n\n2024-03-13T15:00\n18.0\n18.8\n58\n0.1\n\n\n2024-03-13T16:00\n18.0\n18.8\n54\n0.1\n\n\n2024-03-13T17:00\n18.1\n18.8\n49\n0.1\n\n\n2024-03-13T18:00\n18.1\n18.9\n45\n0.1\n\n\n2024-03-13T19:00\n18.2\n19.1\n43\n0.0\n\n\n2024-03-13T20:00\n18.3\n19.8\n41\n0.0\n\n\n2024-03-13T21:00\n18.4\n21.0\n39\n0.0\n\n\n2024-03-13T22:00\n18.3\n21.6\n37\n0.0\n\n\n2024-03-13T23:00\n18.2\n21.8\n34\n0.0\n\n\n2024-03-14T00:00\n18.2\n21.6\n32\n0.0\n\n\n2024-03-14T01:00\n18.2\n21.0\n26\n0.0\n\n\n2024-03-14T02:00\n18.3\n19.9\n19\n0.0\n\n\n2024-03-14T03:00\n18.3\n19.8\n13\n0.0\n\n\n2024-03-14T04:00\n18.2\n19.8\n14\n0.0\n\n\n2024-03-14T05:00\n18.1\n19.7\n15\n0.0\n\n\n2024-03-14T06:00\n18.0\n19.6\n16\n0.0\n\n\n2024-03-14T07:00\n17.8\n19.4\n19\n0.2\n\n\n2024-03-14T08:00\n17.6\n19.2\n23\n0.2\n\n\n2024-03-14T09:00\n17.4\n19.1\n26\n0.2\n\n\n2024-03-14T10:00\n17.4\n19.0\n31\n0.0\n\n\n2024-03-14T11:00\n17.4\n18.9\n37\n0.0\n\n\n2024-03-14T12:00\n17.4\n18.7\n42\n0.0\n\n\n2024-03-14T13:00\n17.4\n18.7\n38\n0.0\n\n\n2024-03-14T14:00\n17.4\n18.7\n33\n0.0\n\n\n2024-03-14T15:00\n17.4\n18.7\n29\n0.0\n\n\n2024-03-14T16:00\n17.5\n18.7\n23\n0.0\n\n\n2024-03-14T17:00\n17.6\n18.8\n16\n0.0\n\n\n2024-03-14T18:00\n17.7\n18.8\n10\n0.0\n\n\n2024-03-14T19:00\n17.8\n18.9\n11\n0.0\n\n\n2024-03-14T20:00\n17.9\n19.7\n12\n0.0\n\n\n2024-03-14T21:00\n18.0\n20.9\n13\n0.0\n\n\n2024-03-14T22:00\n18.1\n21.7\n11\n0.0\n\n\n2024-03-14T23:00\n18.2\n21.8\n8\n0.0\n\n\n2024-03-15T00:00\n18.2\n21.5\n6\n0.0\n\n\n2024-03-15T01:00\n18.2\n20.6\n13\n0.0\n\n\n2024-03-15T02:00\n18.2\n19.4\n19\n0.0\n\n\n2024-03-15T03:00\n18.2\n19.1\n26\n0.0\n\n\n2024-03-15T04:00\n18.1\n19.1\n26\n0.0\n\n\n2024-03-15T05:00\n18.1\n19.1\n26\n0.0\n\n\n2024-03-15T06:00\n18.0\n19.0\n26\n0.0\n\n\n2024-03-15T07:00\n18.0\n19.0\n27\n0.0\n\n\n2024-03-15T08:00\n18.1\n18.9\n28\n0.0\n\n\n2024-03-15T09:00\n18.1\n18.7\n29\n0.0\n\n\n2024-03-15T10:00\n18.0\n18.6\n29\n0.0\n\n\n2024-03-15T11:00\n17.9\n18.4\n29\n0.0\n\n\n2024-03-15T12:00\n17.8\n18.3\n29\n0.0\n\n\n2024-03-15T13:00\n17.7\n18.2\n31\n0.0\n\n\n2024-03-15T14:00\n17.8\n18.3\n33\n0.0\n\n\n2024-03-15T15:00\n17.8\n18.3\n35\n0.0\n\n\n2024-03-15T16:00\n18.0\n18.4\n33\n0.0\n\n\n2024-03-15T17:00\n18.2\n18.5\n31\n0.0\n\n\n2024-03-15T18:00\n18.3\n18.6\n29\n0.0\n\n\n2024-03-15T19:00\n18.4\n18.7\n26\n0.0\n\n\n2024-03-15T20:00\n18.4\n19.7\n22\n0.0\n\n\n2024-03-15T21:00\n18.4\n20.7\n19\n0.0\n\n\n2024-03-15T22:00\n18.4\n21.3\n20\n0.0\n\n\n2024-03-15T23:00\n18.3\n21.3\n22\n0.0\n\n\n2024-03-16T00:00\n18.2\n20.9\n23\n0.0\n\n\n2024-03-16T01:00\n18.1\n20.1\n23\n0.0\n\n\n2024-03-16T02:00\n18.1\n19.0\n23\n0.0\n\n\n2024-03-16T03:00\n18.1\n19.1\n23\n0.0\n\n\n2024-03-16T04:00\n18.1\n19.1\n25\n0.0\n\n\n2024-03-16T05:00\n18.1\n19.4\n27\n0.0\n\n\n2024-03-16T06:00\n18.1\n19.4\n29\n0.0\n\n\n2024-03-16T07:00\n18.1\n19.3\n33\n0.0\n\n\n2024-03-16T08:00\n18.0\n19.1\n38\n0.0\n\n\n2024-03-16T09:00\n18.0\n19.1\n42\n0.0\n\n\n2024-03-16T10:00\n18.1\n19.1\n39\n0.0\n\n\n2024-03-16T11:00\n18.2\n19.2\n35\n0.0\n\n\n2024-03-16T12:00\n18.2\n19.2\n32\n0.0\n\n\n2024-03-16T13:00\n18.2\n19.2\n34\n0.0\n\n\n2024-03-16T14:00\n18.1\n19.2\n37\n0.0\n\n\n2024-03-16T15:00\n18.1\n19.3\n39\n0.0\n\n\n2024-03-16T16:00\n18.2\n19.3\n37\n0.0\n\n\n2024-03-16T17:00\n18.3\n19.4\n34\n0.0\n\n\n2024-03-16T18:00\n18.3\n19.4\n32\n0.0\n\n\n2024-03-16T19:00\n18.4\n19.4\n34\n0.0\n\n\n2024-03-16T20:00\n18.4\n19.4\n37\n0.0\n\n\n2024-03-16T21:00\n18.4\n20.2\n39\n0.0\n\n\n2024-03-16T22:00\n18.5\n20.9\n39\n0.0\n\n\n2024-03-16T23:00\n18.5\n21.5\n39\n0.0\n\n\n\n\n\n\n\n\n\nLes coordonnées GPS : 43.276703,5.334791\n\n\n\nCode\ncoord &lt;- get_forecast(c(43.276703,5.334791))\n\ngridExtra::grid.arrange(coord$graphs[[1]],coord$graphs[[2]],coord$graphs[[3]], ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\nLes données météo chiffrées des coordonnées : 43.276703,5.334791\n\n\n\n\n\n\n\nCode\ncoord$table\n\n\n\n\n\n\n\n\n\n\n\n\ndate_heure\ntemperature_celsius\ntemperature_ressentie_celsius\nchance_pluie\nquantite_pluie\n\n\n\n\n2024-03-10T00:00\n12.5\n4.7\n100\n1.4\n\n\n2024-03-10T01:00\n12.4\n6.0\n100\n4.2\n\n\n2024-03-10T02:00\n12.6\n8.2\n100\n1.6\n\n\n2024-03-10T03:00\n12.4\n8.6\n100\n0.0\n\n\n2024-03-10T04:00\n13.1\n8.6\n100\n0.0\n\n\n2024-03-10T05:00\n13.3\n8.2\n100\n0.0\n\n\n2024-03-10T06:00\n13.1\n9.2\n100\n0.0\n\n\n2024-03-10T07:00\n13.4\n9.4\n88\n0.0\n\n\n2024-03-10T08:00\n13.4\n9.9\n77\n0.0\n\n\n2024-03-10T09:00\n13.3\n10.5\n65\n0.0\n\n\n2024-03-10T10:00\n13.0\n10.0\n47\n0.0\n\n\n2024-03-10T11:00\n13.0\n8.8\n28\n0.0\n\n\n2024-03-10T12:00\n12.8\n8.5\n10\n0.0\n\n\n2024-03-10T13:00\n12.9\n8.2\n7\n0.0\n\n\n2024-03-10T14:00\n13.1\n9.5\n3\n0.0\n\n\n2024-03-10T15:00\n13.4\n8.9\n0\n0.0\n\n\n2024-03-10T16:00\n13.6\n9.8\n3\n0.0\n\n\n2024-03-10T17:00\n13.6\n9.7\n7\n0.0\n\n\n2024-03-10T18:00\n13.6\n10.1\n10\n0.0\n\n\n2024-03-10T19:00\n13.5\n10.4\n26\n0.0\n\n\n2024-03-10T20:00\n13.5\n10.2\n42\n0.0\n\n\n2024-03-10T21:00\n13.5\n10.3\n58\n0.0\n\n\n2024-03-10T22:00\n13.5\n10.8\n62\n0.0\n\n\n2024-03-10T23:00\n13.4\n11.2\n67\n0.0\n\n\n2024-03-11T00:00\n13.4\n11.4\n71\n0.0\n\n\n2024-03-11T01:00\n13.2\n10.6\n69\n0.0\n\n\n2024-03-11T02:00\n12.8\n10.6\n67\n0.0\n\n\n2024-03-11T03:00\n12.1\n9.9\n65\n0.0\n\n\n2024-03-11T04:00\n11.6\n8.1\n58\n0.0\n\n\n2024-03-11T05:00\n11.5\n8.3\n52\n0.0\n\n\n2024-03-11T06:00\n11.6\n8.6\n45\n0.0\n\n\n2024-03-11T07:00\n11.4\n8.5\n42\n0.5\n\n\n2024-03-11T08:00\n10.2\n5.8\n38\n0.7\n\n\n2024-03-11T09:00\n10.7\n5.6\n35\n0.1\n\n\n2024-03-11T10:00\n10.9\n7.4\n24\n0.0\n\n\n2024-03-11T11:00\n11.7\n7.8\n14\n0.0\n\n\n2024-03-11T12:00\n12.9\n9.0\n3\n0.0\n\n\n2024-03-11T13:00\n13.4\n8.8\n4\n0.0\n\n\n2024-03-11T14:00\n14.1\n9.2\n5\n0.0\n\n\n2024-03-11T15:00\n13.4\n7.0\n6\n0.0\n\n\n2024-03-11T16:00\n13.1\n6.5\n8\n0.0\n\n\n2024-03-11T17:00\n13.3\n7.1\n11\n0.0\n\n\n2024-03-11T18:00\n13.1\n7.3\n13\n0.0\n\n\n2024-03-11T19:00\n12.7\n7.6\n10\n0.0\n\n\n2024-03-11T20:00\n12.1\n7.5\n6\n0.0\n\n\n2024-03-11T21:00\n11.8\n6.4\n3\n0.0\n\n\n2024-03-11T22:00\n11.1\n4.5\n2\n0.0\n\n\n2024-03-11T23:00\n10.4\n4.6\n1\n0.0\n\n\n2024-03-12T00:00\n10.1\n4.4\n0\n0.0\n\n\n2024-03-12T01:00\n10.4\n3.8\n0\n0.0\n\n\n2024-03-12T02:00\n10.9\n3.3\n0\n0.0\n\n\n2024-03-12T03:00\n10.4\n2.2\n0\n0.0\n\n\n2024-03-12T04:00\n10.1\n2.8\n0\n0.0\n\n\n2024-03-12T05:00\n10.4\n3.5\n0\n0.0\n\n\n2024-03-12T06:00\n9.9\n3.1\n0\n0.0\n\n\n2024-03-12T07:00\n8.8\n3.1\n0\n0.0\n\n\n2024-03-12T08:00\n9.5\n3.7\n0\n0.0\n\n\n2024-03-12T09:00\n10.7\n4.5\n0\n0.0\n\n\n2024-03-12T10:00\n11.5\n4.7\n0\n0.0\n\n\n2024-03-12T11:00\n12.1\n5.2\n0\n0.0\n\n\n2024-03-12T12:00\n12.5\n5.6\n0\n0.0\n\n\n2024-03-12T13:00\n12.9\n6.5\n0\n0.0\n\n\n2024-03-12T14:00\n13.0\n7.0\n0\n0.0\n\n\n2024-03-12T15:00\n12.9\n6.6\n0\n0.0\n\n\n2024-03-12T16:00\n12.4\n6.2\n0\n0.0\n\n\n2024-03-12T17:00\n11.9\n5.6\n0\n0.0\n\n\n2024-03-12T18:00\n11.6\n5.2\n0\n0.0\n\n\n2024-03-12T19:00\n11.2\n4.9\n0\n0.0\n\n\n2024-03-12T20:00\n10.8\n4.7\n0\n0.0\n\n\n2024-03-12T21:00\n10.3\n4.8\n0\n0.0\n\n\n2024-03-12T22:00\n9.9\n4.5\n0\n0.0\n\n\n2024-03-12T23:00\n9.7\n4.2\n0\n0.0\n\n\n2024-03-13T00:00\n9.5\n4.0\n0\n0.0\n\n\n2024-03-13T01:00\n9.3\n3.7\n0\n0.0\n\n\n2024-03-13T02:00\n9.0\n3.6\n0\n0.0\n\n\n2024-03-13T03:00\n8.6\n3.8\n0\n0.0\n\n\n2024-03-13T04:00\n8.1\n4.5\n0\n0.0\n\n\n2024-03-13T05:00\n7.7\n4.3\n0\n0.0\n\n\n2024-03-13T06:00\n7.1\n4.4\n0\n0.0\n\n\n2024-03-13T07:00\n7.0\n4.3\n0\n0.0\n\n\n2024-03-13T08:00\n7.9\n5.6\n0\n0.0\n\n\n2024-03-13T09:00\n9.6\n7.5\n0\n0.0\n\n\n2024-03-13T10:00\n11.6\n10.5\n0\n0.0\n\n\n2024-03-13T11:00\n13.2\n13.6\n0\n0.0\n\n\n2024-03-13T12:00\n14.3\n15.4\n0\n0.0\n\n\n2024-03-13T13:00\n15.3\n16.2\n0\n0.0\n\n\n2024-03-13T14:00\n16.1\n16.6\n0\n0.0\n\n\n2024-03-13T15:00\n16.6\n16.1\n0\n0.0\n\n\n2024-03-13T16:00\n16.5\n15.9\n0\n0.0\n\n\n2024-03-13T17:00\n15.4\n15.0\n0\n0.0\n\n\n2024-03-13T18:00\n13.0\n12.1\n0\n0.0\n\n\n2024-03-13T19:00\n11.3\n10.2\n0\n0.0\n\n\n2024-03-13T20:00\n10.4\n9.1\n0\n0.0\n\n\n2024-03-13T21:00\n9.8\n8.4\n0\n0.0\n\n\n2024-03-13T22:00\n9.3\n7.8\n1\n0.0\n\n\n2024-03-13T23:00\n8.9\n7.3\n2\n0.0\n\n\n2024-03-14T00:00\n8.5\n6.8\n3\n0.0\n\n\n2024-03-14T01:00\n8.4\n6.6\n3\n0.0\n\n\n2024-03-14T02:00\n8.2\n6.2\n3\n0.0\n\n\n2024-03-14T03:00\n8.0\n6.1\n3\n0.0\n\n\n2024-03-14T04:00\n7.6\n5.6\n3\n0.0\n\n\n2024-03-14T05:00\n7.4\n5.3\n3\n0.0\n\n\n2024-03-14T06:00\n7.5\n5.5\n3\n0.0\n\n\n2024-03-14T07:00\n7.7\n5.3\n3\n0.0\n\n\n2024-03-14T08:00\n11.0\n9.0\n3\n0.0\n\n\n2024-03-14T09:00\n13.6\n11.9\n3\n0.0\n\n\n2024-03-14T10:00\n15.0\n13.0\n3\n0.0\n\n\n2024-03-14T11:00\n15.7\n13.6\n3\n0.0\n\n\n2024-03-14T12:00\n16.1\n13.8\n3\n0.0\n\n\n2024-03-14T13:00\n16.1\n13.7\n3\n0.0\n\n\n2024-03-14T14:00\n15.7\n13.0\n3\n0.0\n\n\n2024-03-14T15:00\n15.1\n12.4\n3\n0.0\n\n\n2024-03-14T16:00\n14.3\n11.9\n2\n0.0\n\n\n2024-03-14T17:00\n13.3\n11.1\n1\n0.0\n\n\n2024-03-14T18:00\n12.4\n10.5\n0\n0.0\n\n\n2024-03-14T19:00\n11.6\n10.2\n0\n0.0\n\n\n2024-03-14T20:00\n10.9\n9.7\n0\n0.0\n\n\n2024-03-14T21:00\n10.3\n9.1\n0\n0.0\n\n\n2024-03-14T22:00\n9.9\n8.5\n0\n0.0\n\n\n2024-03-14T23:00\n9.6\n8.0\n0\n0.0\n\n\n2024-03-15T00:00\n9.4\n7.8\n0\n0.0\n\n\n2024-03-15T01:00\n9.3\n7.6\n0\n0.0\n\n\n2024-03-15T02:00\n9.3\n7.6\n0\n0.0\n\n\n2024-03-15T03:00\n9.2\n7.5\n0\n0.0\n\n\n2024-03-15T04:00\n9.0\n7.2\n0\n0.0\n\n\n2024-03-15T05:00\n8.7\n6.7\n0\n0.0\n\n\n2024-03-15T06:00\n8.9\n7.0\n0\n0.0\n\n\n2024-03-15T07:00\n9.9\n8.3\n0\n0.0\n\n\n2024-03-15T08:00\n11.4\n10.2\n0\n0.0\n\n\n2024-03-15T09:00\n12.7\n11.7\n0\n0.0\n\n\n2024-03-15T10:00\n13.3\n12.5\n0\n0.3\n\n\n2024-03-15T11:00\n13.6\n13.1\n0\n0.3\n\n\n2024-03-15T12:00\n14.0\n13.4\n0\n0.3\n\n\n2024-03-15T13:00\n14.6\n13.6\n0\n0.0\n\n\n2024-03-15T14:00\n15.3\n13.6\n0\n0.0\n\n\n2024-03-15T15:00\n15.6\n13.5\n0\n0.0\n\n\n2024-03-15T16:00\n15.4\n13.4\n0\n0.0\n\n\n2024-03-15T17:00\n14.8\n13.2\n0\n0.0\n\n\n2024-03-15T18:00\n14.1\n12.9\n0\n0.0\n\n\n2024-03-15T19:00\n13.3\n12.6\n0\n0.0\n\n\n2024-03-15T20:00\n12.4\n12.0\n0\n0.0\n\n\n2024-03-15T21:00\n11.6\n11.3\n0\n0.0\n\n\n2024-03-15T22:00\n11.0\n10.5\n0\n0.0\n\n\n2024-03-15T23:00\n10.4\n9.8\n0\n0.0\n\n\n2024-03-16T00:00\n10.1\n9.2\n0\n0.0\n\n\n2024-03-16T01:00\n9.9\n8.9\n0\n0.0\n\n\n2024-03-16T02:00\n9.9\n8.6\n0\n0.0\n\n\n2024-03-16T03:00\n9.8\n8.4\n0\n0.0\n\n\n2024-03-16T04:00\n9.3\n7.9\n0\n0.0\n\n\n2024-03-16T05:00\n8.7\n7.4\n0\n0.0\n\n\n2024-03-16T06:00\n8.9\n7.6\n0\n0.0\n\n\n2024-03-16T07:00\n10.4\n9.0\n0\n0.0\n\n\n2024-03-16T08:00\n12.6\n11.1\n0\n0.0\n\n\n2024-03-16T09:00\n14.6\n12.9\n0\n0.0\n\n\n2024-03-16T10:00\n16.2\n14.0\n0\n0.0\n\n\n2024-03-16T11:00\n17.7\n15.2\n0\n0.0\n\n\n2024-03-16T12:00\n18.8\n16.1\n0\n0.0\n\n\n2024-03-16T13:00\n19.5\n16.7\n0\n0.0\n\n\n2024-03-16T14:00\n19.9\n16.9\n0\n0.0\n\n\n2024-03-16T15:00\n19.8\n16.9\n0\n0.0\n\n\n2024-03-16T16:00\n19.0\n16.9\n0\n0.0\n\n\n2024-03-16T17:00\n17.7\n16.4\n0\n0.0\n\n\n2024-03-16T18:00\n16.4\n15.7\n0\n0.0\n\n\n2024-03-16T19:00\n15.1\n14.7\n2\n0.0\n\n\n2024-03-16T20:00\n13.9\n13.6\n4\n0.0\n\n\n2024-03-16T21:00\n12.9\n12.8\n6\n0.0\n\n\n2024-03-16T22:00\n12.4\n12.5\n6\n0.0\n\n\n2024-03-16T23:00\n12.1\n12.1\n6\n0.0"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/Exercices_Semaine_1/index.html",
    "href": "posts/Exercices_Semaine_1/index.html",
    "title": "Exercices - Semaine 1",
    "section": "",
    "text": "Dans ce post, vous trouverez la première série d’exercices sur R. Celle-ci est réalisée à partir d’un fichier répertoriant les sites olympiques des JO de Paris 2024.\n\n\n\n\nCode\nlibrary(utils)\nlibrary(tidygeocoder)\nlibrary(geosphere)\n\n\n\n\n\nLisez le fichier téléchargé.\n\n\nCode\npath &lt;- \"paris_2024.csv\"\ndata_ex &lt;- read.table(path,\n                      sep = \";\",\n                      header = TRUE,\n                      quote = \"\\\"\")\n\n\nQuels sont les noms et la nature des colonnes ?\n\n\nCode\nclass_data_ex &lt;- sapply(data_ex, class)\npaste(names(class_data_ex), class_data_ex, sep = \": \") |&gt; print()\n\n\n[1] \"geo_point: character\"                     \n[2] \"nom: character\"                           \n[3] \"sites_olympiques_paralympiques: character\"\n[4] \"sports: character\"                        \n\n\nCombien de lignes contient la data.frame ?\n\n\nCode\nr &lt;- nrow(data_ex)\nr\n\n\n[1] 31\n\n\n\n\n\nCombien y a t’il de sites olympiques ?\n\n\nCode\n# liste des sites où \"olympique\" est présent dans la colonne 3\nnb_sites_olympiques &lt;- 0\n\nfor (i in 1:r) {\n  test &lt;-\n    grepl(pattern = \"olympique\",\n          x = data_ex$sites_olympiques_paralympiques[i])\n  if (test == \"TRUE\") {\n    nb_sites_olympiques &lt;- nb_sites_olympiques + 1\n  }\n}\n\nprint(nb_sites_olympiques)\n\n\n[1] 26\n\n\n\n\n\nCombien y a t’il de sites paralympiques ?\n\n\nCode\n# liste des sites où \"paralympique\" est présent dans la colonne 3\nnb_sites_paralympiques &lt;- 0\n\nfor (i in 1:r) {\n  test &lt;-\n    grepl(pattern = \"paralympique\",\n          x = data_ex$sites_olympiques_paralympiques[i])\n  if (test == \"TRUE\") {\n    nb_sites_paralympiques &lt;- nb_sites_paralympiques + 1\n  }\n}\n\nprint(nb_sites_paralympiques)\n\n\n[1] 19\n\n\n\n\n\nQuels sont les sites qui accueillent plusieurs disciplines sportives ?\n\n\nCode\nsports_diff &lt;- strsplit(data_ex$sport, \"[,]\")\n\n# nombre de sports par lieu\nnb_sports &lt;- numeric(r)\nfor (k in 1:r) {\n  nb &lt;- 0\n  for (i in sports_diff[[k]]) {\n    nb &lt;- nb + 1\n  }\n  nb_sports[[k]] &lt;- nb\n} \n\n# nom des lieux où les épreuves de plusieurs sports se déroulent\nfor (i in 1:r) {\n  if (nb_sports[i] &gt;= 2) {\n    print (data_ex$nom[i])\n  }\n}\n\n\n[1] \"Stade de France\"\n[1] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n[1] \"Stade Roland Garros\"\n[1] \"Arena Paris Sud 4 (Porte de Versailles)\"\n[1] \"Pont d'Iéna\"\n[1] \"Arena Bercy\"\n[1] \"Arena Paris nord\"\n[1] \"Arena Paris Sud 6 (Porte de Versailles)\"\n[1] \"Stade de la Concorde\"\n[1] \"Arena Champs de Mars\"\n[1] \"La Défense Arena\"\n[1] \"Stade nautique\"\n[1] \"Arena Paris Sud 1 (Porte de Versailles)\"\n[1] \"Stade Tour Eiffel\"\n[1] \"Arena La Chapelle\"\n[1] \"Centre aquatique\"\n[1] \"Château de Versailles\"\n[1] \"Grand Palais\"\n[1] \"Invalides\"\n\n\n\n\n\nQuels sont les disciplines para-olympiques accueillies dans ces sites franciliens ?\n\n\nCode\n# Nombre de sports,plusieurs fois les mêmes (70)\nnb_total_sports &lt;- 0\nfor (i in 1:r) {\n  nb_total_sports &lt;- nb_total_sports + nb_sports[i]\n}\n\n# Noms des 70 sports\ntotal_sports &lt;- numeric(nb_total_sports)\ns &lt;- 0\nfor (k in 1:r) {\n  for (i in sports_diff[[k]]) {\n    s &lt;- s + 1\n    total_sports[[k + s - 1]] &lt;- i\n  }\n  s &lt;- s - 1\n}\n\n# Noms des sports par ordre alphabétique\ntotal_sports_bis &lt;- sort(total_sports)\n\n# Nombre de sports différents (60)\ntotal_sports_fini &lt;- numeric(60)\ntotal_sports_fini[1] &lt;- total_sports_bis[1]\nsf &lt;- 2\nfor (i in 2:nb_total_sports) {\n  if (total_sports_bis[i] != total_sports_bis[i - 1]) {\n    total_sports_fini[sf] &lt;- total_sports_bis[i]\n    sf &lt;- sf + 1\n  }\n}\n\n# Noms des sports paralympiques (21)\ntotal_sports_para &lt;- numeric(21)\nsp &lt;- 1\nfor (i in 1:60) {\n  for (j in c(\"Para\", \"fauteuil\", \"assis\", \"Goalball\", \"Boccia\", \"Cécifoot\")) {\n    test &lt;- grepl(pattern = j, x = total_sports_fini[i])\n    if (test == \"TRUE\") {\n      total_sports_para[sp] &lt;- total_sports_fini[i]\n      sp &lt;- sp + 1\n    }\n  }\n}\ntotal_sports_para\n\n\n [1] \"Basket fauteuil\"         \"Boccia\"                 \n [3] \"Cécifoot\"                \"Escrime fauteuil\"       \n [5] \"Goalball\"                \"Para athlétisme\"        \n [7] \"Para aviron\"             \"Para Badminton\"         \n [9] \"Para canoë\"              \"Para cyclisme sur piste\"\n[11] \"Para cyclisme sur route\" \"Para équitation\"        \n[13] \"Para judo\"               \"Para natation\"          \n[15] \"Para powerlifting\"       \"Para taekwondo\"         \n[17] \"Para tennis de table\"    \"Para tir à l'arc\"       \n[19] \"Rugby fauteuil\"          \"Tennis fauteuil\"        \n[21] \"Volley-ball assis\"      \n\n\n\n\n\nQuel(s) site(s) accueille(nt) le plus de disciplines différentes ?\n\n\nCode\nmax_sport &lt;- max(nb_sports)\n\nfor (i in 1:r) {\n  if (nb_sports[i] == max_sport) {\n    print (data_ex$nom[i])\n  }\n}\n\n\n[1] \"Arena Bercy\"\n[1] \"Arena Paris nord\"\n[1] \"Stade de la Concorde\"\n[1] \"Arena Champs de Mars\"\n[1] \"Stade nautique\"\n[1] \"Arena La Chapelle\"\n[1] \"Grand Palais\"\n[1] \"Invalides\"\n\n\n\n\n\nQuel discipline aura lieu sur le plus grand nombre de sites ?\n\n\nCode\nnb_lieux_par_sport &lt;- numeric(60)\nfor (s in 1:60) {\n  presence &lt;- 0\n  for (l in 1:r) {\n    test &lt;- grepl(pattern = total_sports_fini[s], x = data_ex$sports[l])\n    if (test == \"TRUE\") {\n      presence &lt;- presence + 1\n    }\n    nb_lieux_par_sport[s] &lt;- presence\n  }\n}\n\nmax_lieu_par_sport &lt;- max(nb_lieux_par_sport)\n\nfor (i in 1:60) {\n  if (nb_lieux_par_sport[i] == max_lieu_par_sport) {\n    print (total_sports_fini[i])\n  }\n}\n\n\n[1] \"Athlétisme\"\n\n\nQuels sont ces sites ?\n\n\nCode\nfor (l in 1:r) {\n  test &lt;- grepl(pattern = \"Athlétisme\", x = data_ex$sports[l])\n  if (test == \"TRUE\") {\n    print(data_ex$nom[l])\n  }\n}\n\n\n[1] \"Stade de France\"\n[1] \"Hôtel de ville de Paris\"\n[1] \"Pont d'Iéna\"\n[1] \"Invalides\"\n\n\n\n\n\nA vol d’oiseau, quels sont les sites les deux sites les plus proches ?\n\n\nCode\n# Création de 2 colonnes : lat et long\ncoord_diff &lt;- strsplit(data_ex$geo_point, \"[,]\")\n\nfor (i in 1:r) {\n  data_ex$lat[i] &lt;- coord_diff[[i]][1]\n  data_ex$long[i] &lt;- coord_diff[[i]][2]\n}\n\ndata_ex$lat &lt;- as.numeric(data_ex$lat)\ndata_ex$long &lt;- as.numeric(data_ex$long)\n\n# Matrice des distances \ndistance &lt;- matrix(nrow = r, ncol = r)\nfor (i in 1:r) {\n  for (j in 1:r) {\n    if (i &lt; j) {\n      distance[i, j] &lt;-\n        distHaversine(c(data_ex$long[i], data_ex$lat[i]),\n                      c(data_ex$long[j], data_ex$lat[j]))\n    }\n  }\n}\n\n# 2 sites à la distance min\nmin_dist &lt;- min(distance, na.rm = TRUE) \n\nsite_min_1 &lt;- 0\nsite_min_2 &lt;- 0\n\nfor (i in 1:r) {\n  for (j in i:r) {\n    if (distHaversine(c(data_ex$long[i], data_ex$lat[i]),\n                      c(data_ex$long[j], data_ex$lat[j])) == min_dist) {\n      site_min_1 &lt;- i\n      site_min_2 &lt;- j\n    }\n  }\n}\n\ndata_ex$nom[site_min_1] \n\n\n[1] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n\n\nCode\ndata_ex$nom[site_min_2] \n\n\n[1] \"Stade BMX de Saint-Quentin-en-Yvelines\"\n\n\n\n\n\nQuels sont les deux sites les plus éloignés ?\n\n\nCode\nmax_dist &lt;- max(distance, na.rm = TRUE) \n\nsite_max_1 &lt;- 0\nsite_max_2 &lt;- 0\n\nfor (i in 1:r) {\n  for (j in i:r) {\n    if (distHaversine(c(data_ex$long[i], data_ex$lat[i]),\n                      c(data_ex$long[j], data_ex$lat[j])) == max_dist) {\n      site_max_1 &lt;- i\n      site_max_2 &lt;- j\n    }\n  }\n}\n\ndata_ex$nom[site_max_1] \n\n\n[1] \"Stade nautique\"\n\n\nCode\ndata_ex$nom[site_max_2] \n\n\n[1] \"Colline d'Elancourt\"\n\n\n\n\n\nVous êtes un heureux millionaire et souhaitez investir dans un bien immobilier. Vous décidez d’acheter un appartement situé au barycentre de l’ensemble des sites olympiques.Où se situe cet appartement ?\n\n\nCode\nm_long &lt;- mean(data_ex$long)\nm_lat &lt;- mean(data_ex$lat)\n\nreverse_geo(m_lat, m_long)$address\n\n\n[1] \"23, Avenue Pierre 1er de Serbie, Quartier de Chaillot, Paris 16e Arrondissement, Paris, Île-de-France, France métropolitaine, 75116, France\""
  },
  {
    "objectID": "posts/Exercices_Semaine_1/index.html#exercices---semaine-1",
    "href": "posts/Exercices_Semaine_1/index.html#exercices---semaine-1",
    "title": "Exercices - Semaine 1",
    "section": "",
    "text": "Dans ce post, vous trouverez la première série d’exercices sur R. Celle-ci est réalisée à partir d’un fichier répertoriant les sites olympiques des JO de Paris 2024.\n\n\n\n\nCode\nlibrary(utils)\nlibrary(tidygeocoder)\nlibrary(geosphere)\n\n\n\n\n\nLisez le fichier téléchargé.\n\n\nCode\npath &lt;- \"paris_2024.csv\"\ndata_ex &lt;- read.table(path,\n                      sep = \";\",\n                      header = TRUE,\n                      quote = \"\\\"\")\n\n\nQuels sont les noms et la nature des colonnes ?\n\n\nCode\nclass_data_ex &lt;- sapply(data_ex, class)\npaste(names(class_data_ex), class_data_ex, sep = \": \") |&gt; print()\n\n\n[1] \"geo_point: character\"                     \n[2] \"nom: character\"                           \n[3] \"sites_olympiques_paralympiques: character\"\n[4] \"sports: character\"                        \n\n\nCombien de lignes contient la data.frame ?\n\n\nCode\nr &lt;- nrow(data_ex)\nr\n\n\n[1] 31\n\n\n\n\n\nCombien y a t’il de sites olympiques ?\n\n\nCode\n# liste des sites où \"olympique\" est présent dans la colonne 3\nnb_sites_olympiques &lt;- 0\n\nfor (i in 1:r) {\n  test &lt;-\n    grepl(pattern = \"olympique\",\n          x = data_ex$sites_olympiques_paralympiques[i])\n  if (test == \"TRUE\") {\n    nb_sites_olympiques &lt;- nb_sites_olympiques + 1\n  }\n}\n\nprint(nb_sites_olympiques)\n\n\n[1] 26\n\n\n\n\n\nCombien y a t’il de sites paralympiques ?\n\n\nCode\n# liste des sites où \"paralympique\" est présent dans la colonne 3\nnb_sites_paralympiques &lt;- 0\n\nfor (i in 1:r) {\n  test &lt;-\n    grepl(pattern = \"paralympique\",\n          x = data_ex$sites_olympiques_paralympiques[i])\n  if (test == \"TRUE\") {\n    nb_sites_paralympiques &lt;- nb_sites_paralympiques + 1\n  }\n}\n\nprint(nb_sites_paralympiques)\n\n\n[1] 19\n\n\n\n\n\nQuels sont les sites qui accueillent plusieurs disciplines sportives ?\n\n\nCode\nsports_diff &lt;- strsplit(data_ex$sport, \"[,]\")\n\n# nombre de sports par lieu\nnb_sports &lt;- numeric(r)\nfor (k in 1:r) {\n  nb &lt;- 0\n  for (i in sports_diff[[k]]) {\n    nb &lt;- nb + 1\n  }\n  nb_sports[[k]] &lt;- nb\n} \n\n# nom des lieux où les épreuves de plusieurs sports se déroulent\nfor (i in 1:r) {\n  if (nb_sports[i] &gt;= 2) {\n    print (data_ex$nom[i])\n  }\n}\n\n\n[1] \"Stade de France\"\n[1] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n[1] \"Stade Roland Garros\"\n[1] \"Arena Paris Sud 4 (Porte de Versailles)\"\n[1] \"Pont d'Iéna\"\n[1] \"Arena Bercy\"\n[1] \"Arena Paris nord\"\n[1] \"Arena Paris Sud 6 (Porte de Versailles)\"\n[1] \"Stade de la Concorde\"\n[1] \"Arena Champs de Mars\"\n[1] \"La Défense Arena\"\n[1] \"Stade nautique\"\n[1] \"Arena Paris Sud 1 (Porte de Versailles)\"\n[1] \"Stade Tour Eiffel\"\n[1] \"Arena La Chapelle\"\n[1] \"Centre aquatique\"\n[1] \"Château de Versailles\"\n[1] \"Grand Palais\"\n[1] \"Invalides\"\n\n\n\n\n\nQuels sont les disciplines para-olympiques accueillies dans ces sites franciliens ?\n\n\nCode\n# Nombre de sports,plusieurs fois les mêmes (70)\nnb_total_sports &lt;- 0\nfor (i in 1:r) {\n  nb_total_sports &lt;- nb_total_sports + nb_sports[i]\n}\n\n# Noms des 70 sports\ntotal_sports &lt;- numeric(nb_total_sports)\ns &lt;- 0\nfor (k in 1:r) {\n  for (i in sports_diff[[k]]) {\n    s &lt;- s + 1\n    total_sports[[k + s - 1]] &lt;- i\n  }\n  s &lt;- s - 1\n}\n\n# Noms des sports par ordre alphabétique\ntotal_sports_bis &lt;- sort(total_sports)\n\n# Nombre de sports différents (60)\ntotal_sports_fini &lt;- numeric(60)\ntotal_sports_fini[1] &lt;- total_sports_bis[1]\nsf &lt;- 2\nfor (i in 2:nb_total_sports) {\n  if (total_sports_bis[i] != total_sports_bis[i - 1]) {\n    total_sports_fini[sf] &lt;- total_sports_bis[i]\n    sf &lt;- sf + 1\n  }\n}\n\n# Noms des sports paralympiques (21)\ntotal_sports_para &lt;- numeric(21)\nsp &lt;- 1\nfor (i in 1:60) {\n  for (j in c(\"Para\", \"fauteuil\", \"assis\", \"Goalball\", \"Boccia\", \"Cécifoot\")) {\n    test &lt;- grepl(pattern = j, x = total_sports_fini[i])\n    if (test == \"TRUE\") {\n      total_sports_para[sp] &lt;- total_sports_fini[i]\n      sp &lt;- sp + 1\n    }\n  }\n}\ntotal_sports_para\n\n\n [1] \"Basket fauteuil\"         \"Boccia\"                 \n [3] \"Cécifoot\"                \"Escrime fauteuil\"       \n [5] \"Goalball\"                \"Para athlétisme\"        \n [7] \"Para aviron\"             \"Para Badminton\"         \n [9] \"Para canoë\"              \"Para cyclisme sur piste\"\n[11] \"Para cyclisme sur route\" \"Para équitation\"        \n[13] \"Para judo\"               \"Para natation\"          \n[15] \"Para powerlifting\"       \"Para taekwondo\"         \n[17] \"Para tennis de table\"    \"Para tir à l'arc\"       \n[19] \"Rugby fauteuil\"          \"Tennis fauteuil\"        \n[21] \"Volley-ball assis\"      \n\n\n\n\n\nQuel(s) site(s) accueille(nt) le plus de disciplines différentes ?\n\n\nCode\nmax_sport &lt;- max(nb_sports)\n\nfor (i in 1:r) {\n  if (nb_sports[i] == max_sport) {\n    print (data_ex$nom[i])\n  }\n}\n\n\n[1] \"Arena Bercy\"\n[1] \"Arena Paris nord\"\n[1] \"Stade de la Concorde\"\n[1] \"Arena Champs de Mars\"\n[1] \"Stade nautique\"\n[1] \"Arena La Chapelle\"\n[1] \"Grand Palais\"\n[1] \"Invalides\"\n\n\n\n\n\nQuel discipline aura lieu sur le plus grand nombre de sites ?\n\n\nCode\nnb_lieux_par_sport &lt;- numeric(60)\nfor (s in 1:60) {\n  presence &lt;- 0\n  for (l in 1:r) {\n    test &lt;- grepl(pattern = total_sports_fini[s], x = data_ex$sports[l])\n    if (test == \"TRUE\") {\n      presence &lt;- presence + 1\n    }\n    nb_lieux_par_sport[s] &lt;- presence\n  }\n}\n\nmax_lieu_par_sport &lt;- max(nb_lieux_par_sport)\n\nfor (i in 1:60) {\n  if (nb_lieux_par_sport[i] == max_lieu_par_sport) {\n    print (total_sports_fini[i])\n  }\n}\n\n\n[1] \"Athlétisme\"\n\n\nQuels sont ces sites ?\n\n\nCode\nfor (l in 1:r) {\n  test &lt;- grepl(pattern = \"Athlétisme\", x = data_ex$sports[l])\n  if (test == \"TRUE\") {\n    print(data_ex$nom[l])\n  }\n}\n\n\n[1] \"Stade de France\"\n[1] \"Hôtel de ville de Paris\"\n[1] \"Pont d'Iéna\"\n[1] \"Invalides\"\n\n\n\n\n\nA vol d’oiseau, quels sont les sites les deux sites les plus proches ?\n\n\nCode\n# Création de 2 colonnes : lat et long\ncoord_diff &lt;- strsplit(data_ex$geo_point, \"[,]\")\n\nfor (i in 1:r) {\n  data_ex$lat[i] &lt;- coord_diff[[i]][1]\n  data_ex$long[i] &lt;- coord_diff[[i]][2]\n}\n\ndata_ex$lat &lt;- as.numeric(data_ex$lat)\ndata_ex$long &lt;- as.numeric(data_ex$long)\n\n# Matrice des distances \ndistance &lt;- matrix(nrow = r, ncol = r)\nfor (i in 1:r) {\n  for (j in 1:r) {\n    if (i &lt; j) {\n      distance[i, j] &lt;-\n        distHaversine(c(data_ex$long[i], data_ex$lat[i]),\n                      c(data_ex$long[j], data_ex$lat[j]))\n    }\n  }\n}\n\n# 2 sites à la distance min\nmin_dist &lt;- min(distance, na.rm = TRUE) \n\nsite_min_1 &lt;- 0\nsite_min_2 &lt;- 0\n\nfor (i in 1:r) {\n  for (j in i:r) {\n    if (distHaversine(c(data_ex$long[i], data_ex$lat[i]),\n                      c(data_ex$long[j], data_ex$lat[j])) == min_dist) {\n      site_min_1 &lt;- i\n      site_min_2 &lt;- j\n    }\n  }\n}\n\ndata_ex$nom[site_min_1] \n\n\n[1] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n\n\nCode\ndata_ex$nom[site_min_2] \n\n\n[1] \"Stade BMX de Saint-Quentin-en-Yvelines\"\n\n\n\n\n\nQuels sont les deux sites les plus éloignés ?\n\n\nCode\nmax_dist &lt;- max(distance, na.rm = TRUE) \n\nsite_max_1 &lt;- 0\nsite_max_2 &lt;- 0\n\nfor (i in 1:r) {\n  for (j in i:r) {\n    if (distHaversine(c(data_ex$long[i], data_ex$lat[i]),\n                      c(data_ex$long[j], data_ex$lat[j])) == max_dist) {\n      site_max_1 &lt;- i\n      site_max_2 &lt;- j\n    }\n  }\n}\n\ndata_ex$nom[site_max_1] \n\n\n[1] \"Stade nautique\"\n\n\nCode\ndata_ex$nom[site_max_2] \n\n\n[1] \"Colline d'Elancourt\"\n\n\n\n\n\nVous êtes un heureux millionaire et souhaitez investir dans un bien immobilier. Vous décidez d’acheter un appartement situé au barycentre de l’ensemble des sites olympiques.Où se situe cet appartement ?\n\n\nCode\nm_long &lt;- mean(data_ex$long)\nm_lat &lt;- mean(data_ex$lat)\n\nreverse_geo(m_lat, m_long)$address\n\n\n[1] \"23, Avenue Pierre 1er de Serbie, Quartier de Chaillot, Paris 16e Arrondissement, Paris, Île-de-France, France métropolitaine, 75116, France\""
  },
  {
    "objectID": "posts/Exercices_Semaine_2/index.html",
    "href": "posts/Exercices_Semaine_2/index.html",
    "title": "Exercices - Semaine 2",
    "section": "",
    "text": "Dans ce post, vous trouverez la seconde série d’exercices sur R. Celle-ci est réalisée à partir de données issues de la page Wikipédia : liste des médaillés olympiques, et plus précisément celles concernant les jeux d’été et d’hiver par sport.\n\n\n\n\nCode\nlibrary(rvest)\nlibrary(purrr)\nlibrary(tidyverse)\nlibrary(knitr)\n\n\n\n\n\nLancez la commande suivante :\n\nlist_tables &lt;-\nsession(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |&gt;\nhtml_elements(\".wikitable\") |&gt;\nhtml_table()\n\nQue s’est-il passé ? Que contient l’objet list_tables ?\nLa commande ci-dessus nous permet d’accéder à des données issues de la page “Liste des médailles olympiques” de Wikipédia. Plus précisément, l’objet list_table est une liste de 6 tibbles qui sont désormais accessibles.\n\n\n\nPréparation initiale de la table des JO d’été.\n\n\nCode\ndata_medailles_sport_ete &lt;- list_tables[[1]]\n\n# Supression de la première ligne et de la première colonne\ndata_medailles_sport_ete &lt;- data_medailles_sport_ete[-c(1), -c(1)]\n\n\n# Renommage des titres de colonnes\nnames(data_medailles_sport_ete) &lt;-\n  c(\n    \"Discipline\",\n    \"Annees\",\n    \"Editions\",\n    \"Epreuves_2020\",\n    \"Or\",\n    \"Argent\",\n    \"Bronze\",\n    \"Total\",\n    \"Athletes_medailles\",\n    \"Athletes_or\"\n  )\n\n# Changement de format\ndata_medailles_sport_ete$Editions &lt;-\n  as.integer(data_medailles_sport_ete$Editions)\ndata_medailles_sport_ete$Epreuves_2020 &lt;-\n  as.integer(data_medailles_sport_ete$Epreuves_2020)\ndata_medailles_sport_ete$Or &lt;-\n  as.integer(data_medailles_sport_ete$Or)\ndata_medailles_sport_ete$Argent &lt;-\n  as.integer(data_medailles_sport_ete$Argent)\ndata_medailles_sport_ete$Bronze &lt;-\n  as.integer(data_medailles_sport_ete$Bronze)\ndata_medailles_sport_ete$Total &lt;-\n  as.integer(data_medailles_sport_ete$Total)\n\n\n\n\n\nQuelles sont les 3 disciplines avec le plus de médailles distribuées depuis le début de l’histoire des jeux olympiques ?\n\n\nCode\nTrois_Disciplines_Plus_Medailles &lt;- data_medailles_sport_ete |&gt;\n  select(Discipline, Total) |&gt;\n  arrange(desc(Total)) |&gt;\n  head(n = 3)\nkable(Trois_Disciplines_Plus_Medailles)\n\n\n\n\n\nDiscipline\nTotal\n\n\n\n\nAthlétisme\n3085\n\n\nNatation(hommes, femmes)\n1814\n\n\nLutte\n1358\n\n\n\n\n\n\n\n\nQuelles sont les 3 disciplines avec le moins d’épreuves en 2020 ?\n\n\nCode\nTrois_Disciplines_Moins_Epreuves &lt;- data_medailles_sport_ete |&gt;\n  group_by(Discipline) |&gt;\n  summarise(Nb_Epreuves = sum (Epreuves_2020)) |&gt;\n  arrange(Nb_Epreuves) |&gt;\n  head(n = 3)\nkable(Trois_Disciplines_Moins_Epreuves)\n\n\n\n\n\nDiscipline\nNb_Epreuves\n\n\n\n\nFootball\n2\n\n\nGolf\n2\n\n\nHandball\n2\n\n\n\n\n\n\n\n\nLa colonne Editions nous renseigne sur le nombre total d’apparence des disciplines aux JO d’été. Nous souhaitons vérifier ce calcul en implémentant notre propre fonction calcul_nb_editions_int. Dans un premier temps, la fonction calcul_nb_editions prendra en entrée un paramètre depuis, de type entier, qui représente depuis quelle année la discipline est au programme.\n\n\nCode\ncalcul_nb_editions_int &lt;- function(depuis) {\n  Annee_0 &lt;- depuis\n  Annee_0 &lt;- as.integer(Annee_0)\n  Nb_Editions &lt;-\n    1 + (2020 - Annee_0) / 4 # JO tous les 4 ans et 1 édition de + que /4\n  if (Annee_0 &lt;= 1916) {\n    Nb_Editions &lt;- Nb_Editions - 1\n  } # 1 Guerres Mondiales\n  if (Annee_0 &lt;= 1940) {\n    Nb_Editions &lt;- Nb_Editions - 2\n  } # 2 Guerre Mondiale\n  return(Nb_Editions)\n}\n\n\n\ncalcul_nb_editions_int(2000) \n\n[1] 6\n\n\n\n\n\nDans certains cas, les disciplines ont été au programme de façon discontinue. Proposez une nouvelle fonction calcul_nb_editions_str qui prendra cette fois-ci en entrée des chaînes de caractères.\n\n\nCode\ncalcul_nb_editions_str &lt;- function(texte) {\n  Nb_Editions &lt;- 0\n  Annee &lt;-\n    (strsplit(texte, \", \", fixed = TRUE)) # séparation avec la virgule\n  nb_param_annee &lt;- length(Annee[[1]])\n  \n  for (i in 1:nb_param_annee) {\n    if (grepl(pattern = \"-\", x = Annee[[1]][i]) == \"TRUE\") {\n      # ex : 1900–1928\n      \n      Annee_diff &lt;- strsplit(Annee[[1]][i], \"-\", fixed = TRUE)\n      Annee_plus &lt;- as.integer(Annee_diff[[1]][2])\n      Annee_moins &lt;- as.integer(Annee_diff[[1]][1])\n      Nb_Editions &lt;-\n        Nb_Editions + 1 + (Annee_plus - Annee_moins) / 4 # différence\n      if (Annee_moins &lt; 1916 & Annee_plus &gt; 1916) {\n        # GM\n        Nb_Editions &lt;- Nb_Editions - 1\n        if (Annee_plus &gt; 1944) {\n          Nb_Editions &lt;- Nb_Editions - 2\n        }\n      }\n      if (Annee_moins &lt; 1940 &\n          Annee_plus &gt; 1944) {\n        Nb_Editions &lt;- Nb_Editions - 2\n      } # GM\n      \n      \n    } else if (grepl(pattern = \"depuis \", x = Annee[[1]][i]) == \"TRUE\") {\n      # ex : depuis 1936\n      Annee_1 &lt;-\n        strsplit(Annee[[1]][i], \"depuis \", fixed = TRUE)[[1]][2]\n      Annee_1 &lt;- as.integer(Annee_1)\n      Nb_Editions &lt;- Nb_Editions + 1 + (2020 - Annee_1) / 4\n      if (Annee_1 &lt;= 1916) {\n        Nb_Editions &lt;- Nb_Editions - 3\n      } # GM\n      if (Annee_1 &lt;= 1940 &\n          Annee_1 &gt; 1916) {\n        Nb_Editions &lt;- Nb_Editions - 2\n      } # GM\n      \n    } else {\n      Nb_Editions &lt;- Nb_Editions + 1\n    } # ex : 1904\n  }\n  return(Nb_Editions)\n}\n\n\n\ncalcul_nb_editions_str(\"1896, 1904, depuis 1920\")\n\n[1] 26\n\n\n\n\n\nDéfinissez une fonction générique calcul_nb_editions et deux implémentations calcul_nb_editions.integer et ’calcul_nb_editions.character.\n\n\nCode\ncalcul_nb_editions &lt;- function (param) {\n  if (is.numeric(param)) {\n    calcul_nb_editions_int(param) # méthode si param au format numérique\n  } else if (is.character(param)) {\n    calcul_nb_editions_str(param)\n  } # méthode si param au format texte\n}\n\n\n\ncalcul_nb_editions(2000)\n\n[1] 6\n\ncalcul_nb_editions(\"1904-1924, depuis 1948\")\n\n[1] 24\n\n\n\n\n\nImplémentez une fonction calcul_medailles_individuelles qui détermine le nombre de médaille maximal a été obtenu par un athlète lors d’olympiades.\n\n\nCode\ncalcul_medailles_individuelles &lt;- function (sportif) {\n  for (i in 1:nrow(data_medailles_sport_ete)) {\n    # liste des athlètes médaillés pour le sport i\n    liste_sportif &lt;-\n      strsplit(data_medailles_sport_ete$Athletes_medailles[i], \"\\\\(|\\\\)\") |&gt;\n      unlist() |&gt;\n      trimws() |&gt;\n      keep( ~ nzchar(.))\n    \n    if (sportif %in% liste_sportif) {\n      # comparaison entre le nom entré de la fonction et la liste\n      position &lt;- which(liste_sportif == sportif) + 2\n      nb_medailles &lt;-\n        strsplit(liste_sportif[position], \"-\")[[1]] |&gt;\n        as.integer() |&gt;\n        sum () # somme des différentes médailles (or, argent et bronze)\n      return(nb_medailles)\n    }\n  }\n}\n\n\n\ncalcul_medailles_individuelles(\"Zbigniew Pietrzykowski\")\n\n[1] 3\n\ncalcul_medailles_individuelles(\"Paavo Nurmi\")\n\n[1] 12\n\n\n\n\n\nQuel est le top 3 des athlètes ? Vous utiliserez la fonction lapply pour appliquer la fonction calcul_medailles_individuelles à chaque élément de la colonne Athletes_medailles.\n\n\nCode\nliste_sportif_entiere &lt;- list()\n\nfor (i in 1:nrow(data_medailles_sport_ete)) {\n  # liste de tous les noms de sportifs\n  liste_sportif_construction &lt;-\n    strsplit(data_medailles_sport_ete$Athletes_medailles[i], \"\\\\(|\\\\)\") |&gt; \n    # séparation\n    unlist() |&gt;\n    trimws() |&gt;\n    keep( ~ nzchar(.))\n  liste_sportif_construction &lt;- liste_sportif_construction |&gt;\n    split(rep(1:(length(\n      liste_sportif_construction\n    ) / 3), each = 3)) # groupement par 3 : nom, nationalité et médailles\n  for (valeur in liste_sportif_construction) {\n    liste_sportif_entiere &lt;-\n      c(liste_sportif_entiere, valeur[[1]]) # sélection du nom\n  }\n}\n\nliste_sportif_entiere &lt;- liste_sportif_entiere |&gt; unlist()\n\n\nnom &lt;- list()\nnb_medaille &lt;- list()\n\nfor (s in liste_sportif_entiere) {\n  # regroupement des noms et nombres de médailles dans 2 liste\n  med &lt;- lapply(s, calcul_medailles_individuelles)\n  nom &lt;- c(nom, s)\n  nb_medaille &lt;- c(nb_medaille, med)\n}\n\ndata_medailles &lt;-\n  data.frame(Nom_Sportif = unlist(nom),\n             # data frame synthétique des noms et nombres de médailles\n             Nombre_medailles = unlist(nb_medaille))\n\nTop3_athlete &lt;- data_medailles |&gt;\n  arrange(desc(Nombre_medailles)) |&gt;\n  head (n = 3) \n\nkable(Top3_athlete)\n\n\n\n\n\nNom_Sportif\nNombre_medailles\n\n\n\n\nMichael Phelps\n28\n\n\nLarissa Latynina\n18\n\n\nEdoardo Mangiarotti\n13\n\n\n\n\n\n\n\n\nQuels sont les 3 nationalités les plus représentées, pour toutes les épreuves, au classement du nombre de médailles d’or individuelles reccueillies ?\n\n\nCode\nliste_nat_entiere &lt;- list()\n\nfor (i in 1:nrow(data_medailles_sport_ete)) {\n  # liste de toutes les nationalités répertoriées\n  liste_nat_construction &lt;-\n    strsplit(data_medailles_sport_ete$Athletes_or[i], \"\\\\(|\\\\)\") |&gt; \n    # pour les médailles d'or\n    unlist() |&gt;\n    trimws() |&gt;\n    keep( ~ nzchar(.))\n  if (is.na(liste_nat_construction[2]) == FALSE) {\n    # valeur aberrante ligne 11 écartée\n    liste_nat_construction &lt;- liste_nat_construction |&gt;\n      split(rep(1:(length(\n        liste_nat_construction\n      ) / 3), each = 3))\n    for (valeur in liste_nat_construction) {\n      liste_nat_entiere &lt;-\n        c(liste_nat_entiere, valeur[[2]]) # sélection des nationalités\n    }\n  }\n}\n\nliste_nat_entiere &lt;-\n  liste_nat_entiere |&gt;  # suppression des répétitions\n  unlist() |&gt;\n  unique()\n\n\nextraire_nationalite_athlete &lt;- function(chaine) {\n  sortie &lt;- list()\n  for (nat in liste_nat_entiere) {\n    # parmi toutes les nationalités\n    test &lt;-\n      grepl(pattern = nat, x = chaine) \n    # test de la présence de la nationalité n dans la chaine\n    if (test == \"TRUE\") {\n      resultat &lt;- gregexpr(nat, chaine)\n      nb_apparitions &lt;-\n        sum(attr(resultat[[1]], \"match.length\") &gt; 0) # somme des apparitions\n      sortie &lt;- c(sortie, (paste(nat, \":\", nb_apparitions)))\n    }\n  }\n  sortie &lt;- sortie |&gt; unlist()\n  return(paste(sortie, collapse = \" , \"))\n}\n# extraire_nationalite_athlete(\"Paavo Nurmi (FIN) (9-3-0) Carl Lewis (USA) (9-1-0)\") # \"FIN : 1 , USA : 1\"\n\n\nnat_2020_sport &lt;-\n  lapply(data_medailles_sport_ete$Athletes_or,\n         extraire_nationalite_athlete) |&gt;\n  unlist() # pour toute la colonne\n\n\nnat &lt;- list()\nnb_or &lt;- list()\n\nfor (n in seq_along(liste_nat_entiere)) {\n  # aggrégation des résultats\n  \n  nb_nat_2020 &lt;- 0\n  \n  for (s in nat_2020_sport) {\n    if (grepl(pattern = liste_nat_entiere[n], x = s) == \"TRUE\") {\n      # si pour le sport s il y a la nationalité n\n      liste_sport &lt;- strsplit(s, \" \")[[1]]\n      position &lt;-\n        which(liste_sport == liste_nat_entiere[n]) + 2 # la position du nb de sportifs en or\n      nb_nat_2020_inter &lt;- liste_sport[position] |&gt;\n        as.integer()\n      nb_nat_2020 &lt;-\n        nb_nat_2020 + nb_nat_2020_inter # ajout de la valeur à celle précédente\n    }\n  }\n  \n  nat &lt;- c(nat, liste_nat_entiere[n])\n  nb_or &lt;- c(nb_or, nb_nat_2020)\n}\n\ndata_medailles_or &lt;-\n  data.frame(Nationalite = unlist(nat),\n             # data frame synthétique du nombre d'athlètes en or par nationalité\n             Nombre_athletes_or = unlist(nb_or))\n\nTop3_nat &lt;- data_medailles_or |&gt;\n  arrange(desc(Nombre_athletes_or)) |&gt;\n  head (n = 3)\n\nkable(Top3_nat)\n\n\n\n\n\nNationalite\nNombre_athletes_or\n\n\n\n\nUSA\n20\n\n\nCHN\n13\n\n\nCUB\n8\n\n\n\n\n\n\n\n\nIntéressez-vous désormais au deuxième tableau contenu dans list_tables, faisant référence aux JO d’hiver. Appliquez les fonctions calcul_medailles_individuelles et extraire_nationalite_athlete aux deux dernières colonnes, à la manière des questions 9 et 10. Cette fois-ci, vous utiliserez la fonction appropriée du package purrr en lieu et place de lapply. Quelles sont les résultats ?\nNettoyage des données\n\n\nCode\ndata_medailles_sport_hiver &lt;- list_tables[[2]]\n\n# Modifications de départ\ndata_medailles_sport_hiver &lt;-\n  data_medailles_sport_hiver[-c(1), -c(1)]\n\nnames(data_medailles_sport_hiver) &lt;-\n  c(\n    \"Discipline\",\n    \"Annees\",\n    \"Editions\",\n    \"Epreuves_2020\",\n    \"Or\",\n    \"Argent\",\n    \"Bronze\",\n    \"Total\",\n    \"Athletes_medailles\",\n    \"Athletes_or\"\n  )\n\ndata_medailles_sport_hiver$Editions &lt;-\n  as.integer(data_medailles_sport_hiver$Editions)\ndata_medailles_sport_hiver$Epreuves_2020 &lt;-\n  as.integer(data_medailles_sport_hiver$Epreuves_2020)\ndata_medailles_sport_hiver$Or &lt;-\n  as.integer(data_medailles_sport_hiver$Or)\ndata_medailles_sport_hiver$Argent &lt;-\n  as.integer(data_medailles_sport_hiver$Argent)\ndata_medailles_sport_hiver$Bronze &lt;-\n  as.integer(data_medailles_sport_hiver$Bronze)\ndata_medailles_sport_hiver$Total &lt;-\n  as.integer(data_medailles_sport_hiver$Total)\n\ndata_medailles_sport_hiver$Athletes_medailles[9] &lt;- \"Viktor Ahn (KOR / RUS) (6-0-2) Apolo Anton Ohno (USA) (2-2-4) Arianna Fontana (ITA) (1-2-5)\"\ndata_medailles_sport_hiver$Athletes_or[9] &lt;- \"Viktor Ahn (KOR / RUS) (6-0-2)\"\n\n\nQuestion 9 : Quel est le top 3 des athlètes ?\n\n\nCode\n# liste des athlètes médaillés d'hiver\nliste_sportif_entiere_hiver &lt;- list()\n\nfor (i in 1:nrow(data_medailles_sport_hiver)) {\n  # liste de tous les noms de sportifs\n  liste_sportif_construction_hiver &lt;-\n    strsplit(data_medailles_sport_hiver$Athletes_medailles[i], \"\\\\(|\\\\)\") |&gt; \n    # séparation\n    unlist() |&gt;\n    trimws() |&gt;\n    keep( ~ nzchar(.))\n  liste_sportif_construction_hiver &lt;- liste_sportif_construction_hiver |&gt;\n    split(rep(1:(length(\n      liste_sportif_construction_hiver\n    ) / 3), each = 3)) # groupement par 3 : nom, nationalité et médailles\n  for (valeur in liste_sportif_construction_hiver) {\n    liste_sportif_entiere_hiver &lt;-\n      c(liste_sportif_entiere_hiver, valeur[[1]]) # sélection du nom\n  }\n}\n\nliste_sportif_entiere_hiver &lt;- liste_sportif_entiere_hiver |&gt; unlist()\n\n# fonction calculant le nombre de médailles pour 1 athlète\ncalcul_medailles_individuelles_hiver &lt;- function (sportif) {\n  for (i in 1:nrow(data_medailles_sport_hiver)) {\n    # liste des athlètes médaillés pour le sport i\n    liste_sportif_hiver &lt;-\n      strsplit(data_medailles_sport_hiver$Athletes_medailles[i], \"\\\\(|\\\\)\") |&gt;\n      unlist() |&gt;\n      trimws() |&gt;\n      keep( ~ nzchar(.))\n    \n    if (sportif %in% liste_sportif_hiver) {\n      # comparaison entre le nom entré de la fonction et la liste\n      position &lt;- which(liste_sportif_hiver == sportif) + 2\n      nb_medailles &lt;-\n        strsplit(liste_sportif_hiver[position], \"-\")[[1]] |&gt;\n        as.integer() |&gt;\n        sum () # somme des différentes médailles (or, argent et bronze)\n      return(nb_medailles)\n    }\n  }\n}\n\n# application de la fonction à l'ensemble des athlètes\nnom_hiver &lt;- list()\nnb_medaille_hiver &lt;- list()\n\nfor (s in liste_sportif_entiere_hiver) {\n  # regroupement des noms et nombres de médailles dans 2 liste\n  med &lt;- map(s, calcul_medailles_individuelles_hiver)\n  nom_hiver &lt;- c(nom_hiver, s)\n  nb_medaille_hiver &lt;- c(nb_medaille_hiver, med)\n}\n\n# Création d'un dataframe synthétique\ndata_medailles_hiver &lt;-\n  data.frame(Nom_Sportif = unlist(nom_hiver),\n             # data frame synthétique des noms et nombres de médailles\n             Nombre_medailles = unlist(nb_medaille_hiver))\n\n# Top 3\nTop3_athlete_hiver &lt;- data_medailles_hiver |&gt;\n  arrange(desc(Nombre_medailles)) |&gt;\n  head (n = 3)\n\nkable(Top3_athlete_hiver)\n\n\n\n\n\nNom_Sportif\nNombre_medailles\n\n\n\n\nMarit Bjørgen\n15\n\n\nOle Einar Bjørndalen\n13\n\n\nIreen Wüst\n11\n\n\n\n\n\nQuestion 10 : Quels sont les 3 nationalités les plus représentées ?\n\n\nCode\nliste_nat_entiere_hiver &lt;- list()\n\nfor (i in 1:nrow(data_medailles_sport_hiver)) {\n  # liste de toutes les nationalités répertoriées\n  liste_nat_construction_hiver &lt;-\n    strsplit(data_medailles_sport_hiver$Athletes_or[i], \"\\\\(|\\\\)\") |&gt; \n    # pour les médailles d'or\n    unlist() |&gt;\n    trimws() |&gt;\n    keep( ~ nzchar(.))\n  \n    liste_nat_construction_hiver &lt;- liste_nat_construction_hiver |&gt;\n      split(rep(1:(length(\n        liste_nat_construction_hiver\n      ) / 3), each = 3))\n    \n    for (valeur in liste_nat_construction_hiver) {\n      liste_nat_entiere_hiver &lt;-\n        c(liste_nat_entiere_hiver, valeur[[2]]) # sélection des nationalités\n    }\n}\n\nliste_nat_entiere_hiver &lt;-\n  liste_nat_entiere_hiver |&gt;  # suppression des répétitions\n  unlist() |&gt;\n  unique()\n\n\nextraire_nationalite_athlete_hiver &lt;- function(chaine) {\n  sortie &lt;- list()\n  for (nat in liste_nat_entiere_hiver) {\n    # parmi toutes les nationalités\n    test &lt;-\n      grepl(pattern = nat, x = chaine) \n    # test de la présence de la nationalité n dans la chaine\n    if (test == \"TRUE\") {\n      resultat &lt;- gregexpr(nat, chaine)\n      nb_apparitions &lt;-\n        sum(attr(resultat[[1]], \"match.length\") &gt; 0) # somme des apparitions\n      sortie &lt;- c(sortie, (paste(nat, \":\", nb_apparitions)))\n    }\n  }\n  sortie &lt;- sortie |&gt; unlist()\n  return(paste(sortie, collapse = \" , \"))\n}\n# extraire_nationalite_athlete_hiver(\"Kevin Kuske (GER) (4-1-0) André Lange (GER) (4-1-0)\") \n# \"GER : 2\"\n\n\nnat_2020_sport_hiver &lt;-\n  map(data_medailles_sport_hiver$Athletes_or,\n         extraire_nationalite_athlete_hiver) |&gt;\n  unlist() # pour toute la colonne\n\n\nnat_hiver &lt;- list()\nnb_or_hiver &lt;- list()\n\nfor (n in seq_along(liste_nat_entiere_hiver)) {\n  # aggrégation des résultats\n  \n  nb_nat_2020_hiver &lt;- 0\n  \n  for (s in nat_2020_sport_hiver) {\n    if (grepl(pattern = liste_nat_entiere_hiver[n], x = s) == \"TRUE\") {\n      # si pour le sport s il y a la nationalité n\n      liste_sport_hiver &lt;- strsplit(s, \" , \")[[1]]\n      for (n_s in seq_along(liste_sport_hiver)) {\n        if (grepl(pattern = liste_nat_entiere_hiver[n],\n                  x = liste_sport_hiver[n_s]) == \"TRUE\") {\n          liste_sport_inter_hiver &lt;- strsplit(liste_sport_hiver[n_s], \" : \")[[1]]\n          nb_nat_2020_inter_hiver &lt;- liste_sport_inter_hiver[2] |&gt;\n                                     as.integer()\n          nb_nat_2020_hiver &lt;- nb_nat_2020_hiver + nb_nat_2020_inter_hiver \n          # ajout de la valeur à celle précédente\n        }\n      }\n    } \n  }\n  \n  nat_hiver &lt;- c(nat_hiver, liste_nat_entiere_hiver[n])\n  nb_or_hiver &lt;- c(nb_or_hiver, nb_nat_2020_hiver)\n}\n\ndata_medailles_or_hiver &lt;-\n  data.frame(Nationalite = unlist(nat_hiver),\n             # data frame synthétique du nombre d'athlètes en or par nationalité\n             Nombre_athletes_or = unlist(nb_or_hiver))\n\nTop3_nat_hiver &lt;- data_medailles_or_hiver |&gt;\n  arrange(desc(Nombre_athletes_or)) |&gt;\n  head (n = 3)\n\nkable(Top3_nat_hiver)\n\n\n\n\n\nNationalite\nNombre_athletes_or\n\n\n\n\nCAN\n8\n\n\nNOR\n7\n\n\nGER\n6"
  },
  {
    "objectID": "posts/Exercices_Semaine_2/index.html#exercices---semaine-2",
    "href": "posts/Exercices_Semaine_2/index.html#exercices---semaine-2",
    "title": "Exercices - Semaine 2",
    "section": "",
    "text": "Dans ce post, vous trouverez la seconde série d’exercices sur R. Celle-ci est réalisée à partir de données issues de la page Wikipédia : liste des médaillés olympiques, et plus précisément celles concernant les jeux d’été et d’hiver par sport.\n\n\n\n\nCode\nlibrary(rvest)\nlibrary(purrr)\nlibrary(tidyverse)\nlibrary(knitr)\n\n\n\n\n\nLancez la commande suivante :\n\nlist_tables &lt;-\nsession(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |&gt;\nhtml_elements(\".wikitable\") |&gt;\nhtml_table()\n\nQue s’est-il passé ? Que contient l’objet list_tables ?\nLa commande ci-dessus nous permet d’accéder à des données issues de la page “Liste des médailles olympiques” de Wikipédia. Plus précisément, l’objet list_table est une liste de 6 tibbles qui sont désormais accessibles.\n\n\n\nPréparation initiale de la table des JO d’été.\n\n\nCode\ndata_medailles_sport_ete &lt;- list_tables[[1]]\n\n# Supression de la première ligne et de la première colonne\ndata_medailles_sport_ete &lt;- data_medailles_sport_ete[-c(1), -c(1)]\n\n\n# Renommage des titres de colonnes\nnames(data_medailles_sport_ete) &lt;-\n  c(\n    \"Discipline\",\n    \"Annees\",\n    \"Editions\",\n    \"Epreuves_2020\",\n    \"Or\",\n    \"Argent\",\n    \"Bronze\",\n    \"Total\",\n    \"Athletes_medailles\",\n    \"Athletes_or\"\n  )\n\n# Changement de format\ndata_medailles_sport_ete$Editions &lt;-\n  as.integer(data_medailles_sport_ete$Editions)\ndata_medailles_sport_ete$Epreuves_2020 &lt;-\n  as.integer(data_medailles_sport_ete$Epreuves_2020)\ndata_medailles_sport_ete$Or &lt;-\n  as.integer(data_medailles_sport_ete$Or)\ndata_medailles_sport_ete$Argent &lt;-\n  as.integer(data_medailles_sport_ete$Argent)\ndata_medailles_sport_ete$Bronze &lt;-\n  as.integer(data_medailles_sport_ete$Bronze)\ndata_medailles_sport_ete$Total &lt;-\n  as.integer(data_medailles_sport_ete$Total)\n\n\n\n\n\nQuelles sont les 3 disciplines avec le plus de médailles distribuées depuis le début de l’histoire des jeux olympiques ?\n\n\nCode\nTrois_Disciplines_Plus_Medailles &lt;- data_medailles_sport_ete |&gt;\n  select(Discipline, Total) |&gt;\n  arrange(desc(Total)) |&gt;\n  head(n = 3)\nkable(Trois_Disciplines_Plus_Medailles)\n\n\n\n\n\nDiscipline\nTotal\n\n\n\n\nAthlétisme\n3085\n\n\nNatation(hommes, femmes)\n1814\n\n\nLutte\n1358\n\n\n\n\n\n\n\n\nQuelles sont les 3 disciplines avec le moins d’épreuves en 2020 ?\n\n\nCode\nTrois_Disciplines_Moins_Epreuves &lt;- data_medailles_sport_ete |&gt;\n  group_by(Discipline) |&gt;\n  summarise(Nb_Epreuves = sum (Epreuves_2020)) |&gt;\n  arrange(Nb_Epreuves) |&gt;\n  head(n = 3)\nkable(Trois_Disciplines_Moins_Epreuves)\n\n\n\n\n\nDiscipline\nNb_Epreuves\n\n\n\n\nFootball\n2\n\n\nGolf\n2\n\n\nHandball\n2\n\n\n\n\n\n\n\n\nLa colonne Editions nous renseigne sur le nombre total d’apparence des disciplines aux JO d’été. Nous souhaitons vérifier ce calcul en implémentant notre propre fonction calcul_nb_editions_int. Dans un premier temps, la fonction calcul_nb_editions prendra en entrée un paramètre depuis, de type entier, qui représente depuis quelle année la discipline est au programme.\n\n\nCode\ncalcul_nb_editions_int &lt;- function(depuis) {\n  Annee_0 &lt;- depuis\n  Annee_0 &lt;- as.integer(Annee_0)\n  Nb_Editions &lt;-\n    1 + (2020 - Annee_0) / 4 # JO tous les 4 ans et 1 édition de + que /4\n  if (Annee_0 &lt;= 1916) {\n    Nb_Editions &lt;- Nb_Editions - 1\n  } # 1 Guerres Mondiales\n  if (Annee_0 &lt;= 1940) {\n    Nb_Editions &lt;- Nb_Editions - 2\n  } # 2 Guerre Mondiale\n  return(Nb_Editions)\n}\n\n\n\ncalcul_nb_editions_int(2000) \n\n[1] 6\n\n\n\n\n\nDans certains cas, les disciplines ont été au programme de façon discontinue. Proposez une nouvelle fonction calcul_nb_editions_str qui prendra cette fois-ci en entrée des chaînes de caractères.\n\n\nCode\ncalcul_nb_editions_str &lt;- function(texte) {\n  Nb_Editions &lt;- 0\n  Annee &lt;-\n    (strsplit(texte, \", \", fixed = TRUE)) # séparation avec la virgule\n  nb_param_annee &lt;- length(Annee[[1]])\n  \n  for (i in 1:nb_param_annee) {\n    if (grepl(pattern = \"-\", x = Annee[[1]][i]) == \"TRUE\") {\n      # ex : 1900–1928\n      \n      Annee_diff &lt;- strsplit(Annee[[1]][i], \"-\", fixed = TRUE)\n      Annee_plus &lt;- as.integer(Annee_diff[[1]][2])\n      Annee_moins &lt;- as.integer(Annee_diff[[1]][1])\n      Nb_Editions &lt;-\n        Nb_Editions + 1 + (Annee_plus - Annee_moins) / 4 # différence\n      if (Annee_moins &lt; 1916 & Annee_plus &gt; 1916) {\n        # GM\n        Nb_Editions &lt;- Nb_Editions - 1\n        if (Annee_plus &gt; 1944) {\n          Nb_Editions &lt;- Nb_Editions - 2\n        }\n      }\n      if (Annee_moins &lt; 1940 &\n          Annee_plus &gt; 1944) {\n        Nb_Editions &lt;- Nb_Editions - 2\n      } # GM\n      \n      \n    } else if (grepl(pattern = \"depuis \", x = Annee[[1]][i]) == \"TRUE\") {\n      # ex : depuis 1936\n      Annee_1 &lt;-\n        strsplit(Annee[[1]][i], \"depuis \", fixed = TRUE)[[1]][2]\n      Annee_1 &lt;- as.integer(Annee_1)\n      Nb_Editions &lt;- Nb_Editions + 1 + (2020 - Annee_1) / 4\n      if (Annee_1 &lt;= 1916) {\n        Nb_Editions &lt;- Nb_Editions - 3\n      } # GM\n      if (Annee_1 &lt;= 1940 &\n          Annee_1 &gt; 1916) {\n        Nb_Editions &lt;- Nb_Editions - 2\n      } # GM\n      \n    } else {\n      Nb_Editions &lt;- Nb_Editions + 1\n    } # ex : 1904\n  }\n  return(Nb_Editions)\n}\n\n\n\ncalcul_nb_editions_str(\"1896, 1904, depuis 1920\")\n\n[1] 26\n\n\n\n\n\nDéfinissez une fonction générique calcul_nb_editions et deux implémentations calcul_nb_editions.integer et ’calcul_nb_editions.character.\n\n\nCode\ncalcul_nb_editions &lt;- function (param) {\n  if (is.numeric(param)) {\n    calcul_nb_editions_int(param) # méthode si param au format numérique\n  } else if (is.character(param)) {\n    calcul_nb_editions_str(param)\n  } # méthode si param au format texte\n}\n\n\n\ncalcul_nb_editions(2000)\n\n[1] 6\n\ncalcul_nb_editions(\"1904-1924, depuis 1948\")\n\n[1] 24\n\n\n\n\n\nImplémentez une fonction calcul_medailles_individuelles qui détermine le nombre de médaille maximal a été obtenu par un athlète lors d’olympiades.\n\n\nCode\ncalcul_medailles_individuelles &lt;- function (sportif) {\n  for (i in 1:nrow(data_medailles_sport_ete)) {\n    # liste des athlètes médaillés pour le sport i\n    liste_sportif &lt;-\n      strsplit(data_medailles_sport_ete$Athletes_medailles[i], \"\\\\(|\\\\)\") |&gt;\n      unlist() |&gt;\n      trimws() |&gt;\n      keep( ~ nzchar(.))\n    \n    if (sportif %in% liste_sportif) {\n      # comparaison entre le nom entré de la fonction et la liste\n      position &lt;- which(liste_sportif == sportif) + 2\n      nb_medailles &lt;-\n        strsplit(liste_sportif[position], \"-\")[[1]] |&gt;\n        as.integer() |&gt;\n        sum () # somme des différentes médailles (or, argent et bronze)\n      return(nb_medailles)\n    }\n  }\n}\n\n\n\ncalcul_medailles_individuelles(\"Zbigniew Pietrzykowski\")\n\n[1] 3\n\ncalcul_medailles_individuelles(\"Paavo Nurmi\")\n\n[1] 12\n\n\n\n\n\nQuel est le top 3 des athlètes ? Vous utiliserez la fonction lapply pour appliquer la fonction calcul_medailles_individuelles à chaque élément de la colonne Athletes_medailles.\n\n\nCode\nliste_sportif_entiere &lt;- list()\n\nfor (i in 1:nrow(data_medailles_sport_ete)) {\n  # liste de tous les noms de sportifs\n  liste_sportif_construction &lt;-\n    strsplit(data_medailles_sport_ete$Athletes_medailles[i], \"\\\\(|\\\\)\") |&gt; \n    # séparation\n    unlist() |&gt;\n    trimws() |&gt;\n    keep( ~ nzchar(.))\n  liste_sportif_construction &lt;- liste_sportif_construction |&gt;\n    split(rep(1:(length(\n      liste_sportif_construction\n    ) / 3), each = 3)) # groupement par 3 : nom, nationalité et médailles\n  for (valeur in liste_sportif_construction) {\n    liste_sportif_entiere &lt;-\n      c(liste_sportif_entiere, valeur[[1]]) # sélection du nom\n  }\n}\n\nliste_sportif_entiere &lt;- liste_sportif_entiere |&gt; unlist()\n\n\nnom &lt;- list()\nnb_medaille &lt;- list()\n\nfor (s in liste_sportif_entiere) {\n  # regroupement des noms et nombres de médailles dans 2 liste\n  med &lt;- lapply(s, calcul_medailles_individuelles)\n  nom &lt;- c(nom, s)\n  nb_medaille &lt;- c(nb_medaille, med)\n}\n\ndata_medailles &lt;-\n  data.frame(Nom_Sportif = unlist(nom),\n             # data frame synthétique des noms et nombres de médailles\n             Nombre_medailles = unlist(nb_medaille))\n\nTop3_athlete &lt;- data_medailles |&gt;\n  arrange(desc(Nombre_medailles)) |&gt;\n  head (n = 3) \n\nkable(Top3_athlete)\n\n\n\n\n\nNom_Sportif\nNombre_medailles\n\n\n\n\nMichael Phelps\n28\n\n\nLarissa Latynina\n18\n\n\nEdoardo Mangiarotti\n13\n\n\n\n\n\n\n\n\nQuels sont les 3 nationalités les plus représentées, pour toutes les épreuves, au classement du nombre de médailles d’or individuelles reccueillies ?\n\n\nCode\nliste_nat_entiere &lt;- list()\n\nfor (i in 1:nrow(data_medailles_sport_ete)) {\n  # liste de toutes les nationalités répertoriées\n  liste_nat_construction &lt;-\n    strsplit(data_medailles_sport_ete$Athletes_or[i], \"\\\\(|\\\\)\") |&gt; \n    # pour les médailles d'or\n    unlist() |&gt;\n    trimws() |&gt;\n    keep( ~ nzchar(.))\n  if (is.na(liste_nat_construction[2]) == FALSE) {\n    # valeur aberrante ligne 11 écartée\n    liste_nat_construction &lt;- liste_nat_construction |&gt;\n      split(rep(1:(length(\n        liste_nat_construction\n      ) / 3), each = 3))\n    for (valeur in liste_nat_construction) {\n      liste_nat_entiere &lt;-\n        c(liste_nat_entiere, valeur[[2]]) # sélection des nationalités\n    }\n  }\n}\n\nliste_nat_entiere &lt;-\n  liste_nat_entiere |&gt;  # suppression des répétitions\n  unlist() |&gt;\n  unique()\n\n\nextraire_nationalite_athlete &lt;- function(chaine) {\n  sortie &lt;- list()\n  for (nat in liste_nat_entiere) {\n    # parmi toutes les nationalités\n    test &lt;-\n      grepl(pattern = nat, x = chaine) \n    # test de la présence de la nationalité n dans la chaine\n    if (test == \"TRUE\") {\n      resultat &lt;- gregexpr(nat, chaine)\n      nb_apparitions &lt;-\n        sum(attr(resultat[[1]], \"match.length\") &gt; 0) # somme des apparitions\n      sortie &lt;- c(sortie, (paste(nat, \":\", nb_apparitions)))\n    }\n  }\n  sortie &lt;- sortie |&gt; unlist()\n  return(paste(sortie, collapse = \" , \"))\n}\n# extraire_nationalite_athlete(\"Paavo Nurmi (FIN) (9-3-0) Carl Lewis (USA) (9-1-0)\") # \"FIN : 1 , USA : 1\"\n\n\nnat_2020_sport &lt;-\n  lapply(data_medailles_sport_ete$Athletes_or,\n         extraire_nationalite_athlete) |&gt;\n  unlist() # pour toute la colonne\n\n\nnat &lt;- list()\nnb_or &lt;- list()\n\nfor (n in seq_along(liste_nat_entiere)) {\n  # aggrégation des résultats\n  \n  nb_nat_2020 &lt;- 0\n  \n  for (s in nat_2020_sport) {\n    if (grepl(pattern = liste_nat_entiere[n], x = s) == \"TRUE\") {\n      # si pour le sport s il y a la nationalité n\n      liste_sport &lt;- strsplit(s, \" \")[[1]]\n      position &lt;-\n        which(liste_sport == liste_nat_entiere[n]) + 2 # la position du nb de sportifs en or\n      nb_nat_2020_inter &lt;- liste_sport[position] |&gt;\n        as.integer()\n      nb_nat_2020 &lt;-\n        nb_nat_2020 + nb_nat_2020_inter # ajout de la valeur à celle précédente\n    }\n  }\n  \n  nat &lt;- c(nat, liste_nat_entiere[n])\n  nb_or &lt;- c(nb_or, nb_nat_2020)\n}\n\ndata_medailles_or &lt;-\n  data.frame(Nationalite = unlist(nat),\n             # data frame synthétique du nombre d'athlètes en or par nationalité\n             Nombre_athletes_or = unlist(nb_or))\n\nTop3_nat &lt;- data_medailles_or |&gt;\n  arrange(desc(Nombre_athletes_or)) |&gt;\n  head (n = 3)\n\nkable(Top3_nat)\n\n\n\n\n\nNationalite\nNombre_athletes_or\n\n\n\n\nUSA\n20\n\n\nCHN\n13\n\n\nCUB\n8\n\n\n\n\n\n\n\n\nIntéressez-vous désormais au deuxième tableau contenu dans list_tables, faisant référence aux JO d’hiver. Appliquez les fonctions calcul_medailles_individuelles et extraire_nationalite_athlete aux deux dernières colonnes, à la manière des questions 9 et 10. Cette fois-ci, vous utiliserez la fonction appropriée du package purrr en lieu et place de lapply. Quelles sont les résultats ?\nNettoyage des données\n\n\nCode\ndata_medailles_sport_hiver &lt;- list_tables[[2]]\n\n# Modifications de départ\ndata_medailles_sport_hiver &lt;-\n  data_medailles_sport_hiver[-c(1), -c(1)]\n\nnames(data_medailles_sport_hiver) &lt;-\n  c(\n    \"Discipline\",\n    \"Annees\",\n    \"Editions\",\n    \"Epreuves_2020\",\n    \"Or\",\n    \"Argent\",\n    \"Bronze\",\n    \"Total\",\n    \"Athletes_medailles\",\n    \"Athletes_or\"\n  )\n\ndata_medailles_sport_hiver$Editions &lt;-\n  as.integer(data_medailles_sport_hiver$Editions)\ndata_medailles_sport_hiver$Epreuves_2020 &lt;-\n  as.integer(data_medailles_sport_hiver$Epreuves_2020)\ndata_medailles_sport_hiver$Or &lt;-\n  as.integer(data_medailles_sport_hiver$Or)\ndata_medailles_sport_hiver$Argent &lt;-\n  as.integer(data_medailles_sport_hiver$Argent)\ndata_medailles_sport_hiver$Bronze &lt;-\n  as.integer(data_medailles_sport_hiver$Bronze)\ndata_medailles_sport_hiver$Total &lt;-\n  as.integer(data_medailles_sport_hiver$Total)\n\ndata_medailles_sport_hiver$Athletes_medailles[9] &lt;- \"Viktor Ahn (KOR / RUS) (6-0-2) Apolo Anton Ohno (USA) (2-2-4) Arianna Fontana (ITA) (1-2-5)\"\ndata_medailles_sport_hiver$Athletes_or[9] &lt;- \"Viktor Ahn (KOR / RUS) (6-0-2)\"\n\n\nQuestion 9 : Quel est le top 3 des athlètes ?\n\n\nCode\n# liste des athlètes médaillés d'hiver\nliste_sportif_entiere_hiver &lt;- list()\n\nfor (i in 1:nrow(data_medailles_sport_hiver)) {\n  # liste de tous les noms de sportifs\n  liste_sportif_construction_hiver &lt;-\n    strsplit(data_medailles_sport_hiver$Athletes_medailles[i], \"\\\\(|\\\\)\") |&gt; \n    # séparation\n    unlist() |&gt;\n    trimws() |&gt;\n    keep( ~ nzchar(.))\n  liste_sportif_construction_hiver &lt;- liste_sportif_construction_hiver |&gt;\n    split(rep(1:(length(\n      liste_sportif_construction_hiver\n    ) / 3), each = 3)) # groupement par 3 : nom, nationalité et médailles\n  for (valeur in liste_sportif_construction_hiver) {\n    liste_sportif_entiere_hiver &lt;-\n      c(liste_sportif_entiere_hiver, valeur[[1]]) # sélection du nom\n  }\n}\n\nliste_sportif_entiere_hiver &lt;- liste_sportif_entiere_hiver |&gt; unlist()\n\n# fonction calculant le nombre de médailles pour 1 athlète\ncalcul_medailles_individuelles_hiver &lt;- function (sportif) {\n  for (i in 1:nrow(data_medailles_sport_hiver)) {\n    # liste des athlètes médaillés pour le sport i\n    liste_sportif_hiver &lt;-\n      strsplit(data_medailles_sport_hiver$Athletes_medailles[i], \"\\\\(|\\\\)\") |&gt;\n      unlist() |&gt;\n      trimws() |&gt;\n      keep( ~ nzchar(.))\n    \n    if (sportif %in% liste_sportif_hiver) {\n      # comparaison entre le nom entré de la fonction et la liste\n      position &lt;- which(liste_sportif_hiver == sportif) + 2\n      nb_medailles &lt;-\n        strsplit(liste_sportif_hiver[position], \"-\")[[1]] |&gt;\n        as.integer() |&gt;\n        sum () # somme des différentes médailles (or, argent et bronze)\n      return(nb_medailles)\n    }\n  }\n}\n\n# application de la fonction à l'ensemble des athlètes\nnom_hiver &lt;- list()\nnb_medaille_hiver &lt;- list()\n\nfor (s in liste_sportif_entiere_hiver) {\n  # regroupement des noms et nombres de médailles dans 2 liste\n  med &lt;- map(s, calcul_medailles_individuelles_hiver)\n  nom_hiver &lt;- c(nom_hiver, s)\n  nb_medaille_hiver &lt;- c(nb_medaille_hiver, med)\n}\n\n# Création d'un dataframe synthétique\ndata_medailles_hiver &lt;-\n  data.frame(Nom_Sportif = unlist(nom_hiver),\n             # data frame synthétique des noms et nombres de médailles\n             Nombre_medailles = unlist(nb_medaille_hiver))\n\n# Top 3\nTop3_athlete_hiver &lt;- data_medailles_hiver |&gt;\n  arrange(desc(Nombre_medailles)) |&gt;\n  head (n = 3)\n\nkable(Top3_athlete_hiver)\n\n\n\n\n\nNom_Sportif\nNombre_medailles\n\n\n\n\nMarit Bjørgen\n15\n\n\nOle Einar Bjørndalen\n13\n\n\nIreen Wüst\n11\n\n\n\n\n\nQuestion 10 : Quels sont les 3 nationalités les plus représentées ?\n\n\nCode\nliste_nat_entiere_hiver &lt;- list()\n\nfor (i in 1:nrow(data_medailles_sport_hiver)) {\n  # liste de toutes les nationalités répertoriées\n  liste_nat_construction_hiver &lt;-\n    strsplit(data_medailles_sport_hiver$Athletes_or[i], \"\\\\(|\\\\)\") |&gt; \n    # pour les médailles d'or\n    unlist() |&gt;\n    trimws() |&gt;\n    keep( ~ nzchar(.))\n  \n    liste_nat_construction_hiver &lt;- liste_nat_construction_hiver |&gt;\n      split(rep(1:(length(\n        liste_nat_construction_hiver\n      ) / 3), each = 3))\n    \n    for (valeur in liste_nat_construction_hiver) {\n      liste_nat_entiere_hiver &lt;-\n        c(liste_nat_entiere_hiver, valeur[[2]]) # sélection des nationalités\n    }\n}\n\nliste_nat_entiere_hiver &lt;-\n  liste_nat_entiere_hiver |&gt;  # suppression des répétitions\n  unlist() |&gt;\n  unique()\n\n\nextraire_nationalite_athlete_hiver &lt;- function(chaine) {\n  sortie &lt;- list()\n  for (nat in liste_nat_entiere_hiver) {\n    # parmi toutes les nationalités\n    test &lt;-\n      grepl(pattern = nat, x = chaine) \n    # test de la présence de la nationalité n dans la chaine\n    if (test == \"TRUE\") {\n      resultat &lt;- gregexpr(nat, chaine)\n      nb_apparitions &lt;-\n        sum(attr(resultat[[1]], \"match.length\") &gt; 0) # somme des apparitions\n      sortie &lt;- c(sortie, (paste(nat, \":\", nb_apparitions)))\n    }\n  }\n  sortie &lt;- sortie |&gt; unlist()\n  return(paste(sortie, collapse = \" , \"))\n}\n# extraire_nationalite_athlete_hiver(\"Kevin Kuske (GER) (4-1-0) André Lange (GER) (4-1-0)\") \n# \"GER : 2\"\n\n\nnat_2020_sport_hiver &lt;-\n  map(data_medailles_sport_hiver$Athletes_or,\n         extraire_nationalite_athlete_hiver) |&gt;\n  unlist() # pour toute la colonne\n\n\nnat_hiver &lt;- list()\nnb_or_hiver &lt;- list()\n\nfor (n in seq_along(liste_nat_entiere_hiver)) {\n  # aggrégation des résultats\n  \n  nb_nat_2020_hiver &lt;- 0\n  \n  for (s in nat_2020_sport_hiver) {\n    if (grepl(pattern = liste_nat_entiere_hiver[n], x = s) == \"TRUE\") {\n      # si pour le sport s il y a la nationalité n\n      liste_sport_hiver &lt;- strsplit(s, \" , \")[[1]]\n      for (n_s in seq_along(liste_sport_hiver)) {\n        if (grepl(pattern = liste_nat_entiere_hiver[n],\n                  x = liste_sport_hiver[n_s]) == \"TRUE\") {\n          liste_sport_inter_hiver &lt;- strsplit(liste_sport_hiver[n_s], \" : \")[[1]]\n          nb_nat_2020_inter_hiver &lt;- liste_sport_inter_hiver[2] |&gt;\n                                     as.integer()\n          nb_nat_2020_hiver &lt;- nb_nat_2020_hiver + nb_nat_2020_inter_hiver \n          # ajout de la valeur à celle précédente\n        }\n      }\n    } \n  }\n  \n  nat_hiver &lt;- c(nat_hiver, liste_nat_entiere_hiver[n])\n  nb_or_hiver &lt;- c(nb_or_hiver, nb_nat_2020_hiver)\n}\n\ndata_medailles_or_hiver &lt;-\n  data.frame(Nationalite = unlist(nat_hiver),\n             # data frame synthétique du nombre d'athlètes en or par nationalité\n             Nombre_athletes_or = unlist(nb_or_hiver))\n\nTop3_nat_hiver &lt;- data_medailles_or_hiver |&gt;\n  arrange(desc(Nombre_athletes_or)) |&gt;\n  head (n = 3)\n\nkable(Top3_nat_hiver)\n\n\n\n\n\nNationalite\nNombre_athletes_or\n\n\n\n\nCAN\n8\n\n\nNOR\n7\n\n\nGER\n6"
  },
  {
    "objectID": "posts/Exercices_Semaine_3/index.html",
    "href": "posts/Exercices_Semaine_3/index.html",
    "title": "Exercices - Semaine 3",
    "section": "",
    "text": "Dans ce post vous trouverez la troisième série d’exercices sur R. Celle-ci est réalisée à partir d’une base de données SQL et de 2 fichiers comprenant des informations sur les athlètes olympiques.\n\n\n\n\nCode\nlibrary(stringr)\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(arrow)\nlibrary(jsonlite)\nlibrary(RSQLite)\nlibrary(knitr)\n\n\n\n\n\nListez les fichiers présents dans le dossier data. Quelles sont les extensions des différents fichiers ?\n\n\nCode\nlist.files(\"data/\")\n\n\n[1] \"data.sqlite\"            \"olympics_athletes.json\" \"tokyo_athletes.parquet\"\n\n\nLes extensions des fichiers sont : .sqlite, .json et .parquet.\n\n\n\nLisez le fichier .parquet en utilisant la librairie arrow.\n\n\nCode\ntokyo_athletes &lt;- arrow::read_parquet(\"data/tokyo_athletes.parquet\")\n\n\nQuelles sont les dimensions de la table ? (lignes, colonnes)\n\n\nCode\ndim(tokyo_athletes)\n\n\n[1] 11085     3\n\n\nQuelles sont les colonnes présentes ?\n\n\nCode\ncolnames(tokyo_athletes)\n\n\n[1] \"Name\"       \"NOC\"        \"Discipline\"\n\n\n\n\n\nLisez le fichier .json en utilisant la librairie jsonlite.\n\n\nCode\nolympics_athletes &lt;-\n  read_json(\"data/olympics_athletes.json\", simplifyVector = T)\n\n\nQuelles sont les dimensions de la table ? (lignes, colonnes)\n\n\nCode\ndim(olympics_athletes)\n\n\n[1] 269731     13\n\n\nQuelles sont les colonnes présentes ?\n\n\nCode\ncolnames(olympics_athletes)\n\n\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n\n\n\n\n\nImportez la librairie RSQLite, et ouvrez une connexion à la base de données sqlite en utilisant la fonction dbConnect.\n\n\nCode\ncon &lt;- dbConnect(RSQLite::SQLite(), dbname = \"data/data.sqlite\")\n\n\nQuelles sont les tables présentes dans la table ?\n\n\nCode\ndbListTables(con)\n\n\n[1] \"tokyo_medals\" \"tokyo_teams\" \n\n\n\n\n\nCréez deux nouvelles tables dans la base de données à l’aide de la fonction dbWriteTable. Les tables s’appeleront respectivement olympics_athletes et tokyo_athletes pour les fichiers olympics_athletes.json et tokyo_athletes.parquet.\n\n\nCode\ndbWriteTable(con, \"tokyo_athletes\", tokyo_athletes)\ndbWriteTable(con, \"olympics_athletes\", olympics_athletes)\ndbListTables(con)\n\n\n[1] \"olympics_athletes\" \"tokyo_athletes\"    \"tokyo_medals\"     \n[4] \"tokyo_teams\"      \n\n\nDésormais 4 tables sont présentes dans la base de données.\n\n\n\nInspectez la table olympics_athletes en utilisant la fonction dbListFields. Quelles sont les colonnes de la table ?\n\n\nCode\ndbListFields(con, \"olympics_athletes\")\n\n\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n\n\n\n\n\nImportez cette table depuis la base de données en utilisant la fonction dbReadTable. Convertissez la table en tibble en utilisant la fonction as_tibble.\n\n\nCode\nolympics_athletes &lt;-\n  dbReadTable(con, \"olympics_athletes\") |&gt; as_tibble()\n\n\n\n\n\nConvertissez la colonne Sex en variable catégorielle avec la fonction mutate.\n\n\nCode\nolympics_athletes &lt;- olympics_athletes |&gt;\n  mutate(Sex = recode(Sex, \"F\" = \"Femme\", \"M\" = \"Homme\"))\n\nstr(olympics_athletes$Sex)\n\n\n chr [1:269731] \"Homme\" \"Homme\" \"Homme\" \"Homme\" \"Femme\" \"Femme\" \"Femme\" ...\n\n\n\n\n\nCréez deux colonnes à partir de la colonne Games. La première colonne Year sera une colonne de type integer contenant l’année des jeux. La deuxième colonne isSummer sera une colonne booléenne qui indiquera si les jeux sont des jeux d’été ou d’hiver.\n\n\nCode\nolympics_athletes &lt;- olympics_athletes |&gt;\n  separate_wider_delim (Games, delim = \" \", names = c(\"Year\", \"isSummer\"))\n\nstr(olympics_athletes$Year)\n\n\n chr [1:269731] \"1992\" \"2012\" \"1920\" \"1900\" \"1988\" \"1988\" \"1992\" \"1992\" ...\n\n\nCode\nstr(olympics_athletes$isSummer)\n\n\n chr [1:269731] \"Summer\" \"Summer\" \"Summer\" \"Summer\" \"Winter\" \"Winter\" ...\n\n\n\n\n\nCalculez la moyenne d’age des athletes pour chacune des éditions des JO d’été. Quelle édition a compté les athlètes les plus jeunes ?\n\n\nCode\nolympics_athletes |&gt; group_by(Year) |&gt;\n  summarise(moyenne_age = mean(Age, na.rm = TRUE)) |&gt;\n  arrange(moyenne_age) |&gt;\n  mutate(moyenne_age = round(moyenne_age)) |&gt; \n  head(n = 1) |&gt; \n  kable()\n\n\n\n\n\nYear\nmoyenne_age\n\n\n\n\n1896\n24\n\n\n\n\n\nLes plus vieux ?\n\n\nCode\nolympics_athletes |&gt; group_by(Year) |&gt;\n  summarise(moyenne_age = mean(Age, na.rm = TRUE)) |&gt;\n  arrange(desc(moyenne_age)) |&gt;\n  mutate(moyenne_age = round(moyenne_age)) |&gt; \n  head(n = 1) |&gt; \n  kable()\n\n\n\n\n\nYear\nmoyenne_age\n\n\n\n\n1932\n30\n\n\n\n\n\n\n\n\nQuelle est la discipline des JO d’été dont la taille des athlètes féminines est la plus grande ? (en cm)\n\n\nCode\nolympics_athletes |&gt; filter(Sex == \"Femme\", Height &gt;= 0) |&gt;\n  group_by(Sport) |&gt;\n  summarise(max_taille = max(Height, na.rm = TRUE)) |&gt;\n  arrange (desc(max_taille)) |&gt;\n  head(n = 1) |&gt; \n  kable()\n\n\n\n\n\nSport\nmax_taille\n\n\n\n\nBasketball\n213\n\n\n\n\n\nQuelle a été cette discipline au cours de chacune des éditions ?\n\n\nCode\nolympics_athletes |&gt;  filter(Sex == \"Femme\", Height &gt;= 0) |&gt;\n  group_by(Year) |&gt;\n  summarise(max_taille = max(Height, na.rm = TRUE),\n            Sport = Sport[which.max(Height)]) |&gt;\n  arrange(desc(Year)) |&gt; \n  kable()\n\n\n\n\n\nYear\nmax_taille\nSport\n\n\n\n\n2016\n203\nBasketball\n\n\n2014\n186\nIce Hockey\n\n\n2012\n206\nBasketball\n\n\n2010\n194\nBobsleigh\n\n\n2008\n202\nVolleyball\n\n\n2006\n187\nBobsleigh\n\n\n2004\n202\nVolleyball\n\n\n2002\n187\nBobsleigh\n\n\n2000\n213\nBasketball\n\n\n1998\n187\nLuge\n\n\n1996\n204\nBasketball\n\n\n1994\n187\nLuge\n\n\n1992\n204\nBasketball\n\n\n1988\n204\nBasketball\n\n\n1984\n205\nBasketball\n\n\n1980\n210\nBasketball\n\n\n1976\n210\nBasketball\n\n\n1972\n190\nAthletics\n\n\n1968\n188\nAthletics\n\n\n1964\n188\nVolleyball\n\n\n1960\n186\nSwimming\n\n\n1956\n185\nAthletics\n\n\n1952\n188\nAthletics\n\n\n1948\n180\nAthletics\n\n\n1936\n183\nFencing\n\n\n1932\n183\nFencing\n\n\n1928\n183\nFencing\n\n\n1924\n175\nFencing\n\n\n1920\n175\nDiving\n\n\n\n\n\nCalculez le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes\n\n\nCode\nolympics_athletes |&gt;  filter(Sex == \"Femme\", Height &gt;= 0) |&gt;\n  group_by(Year) |&gt;\n  summarise(max_taille = max(Height, na.rm = TRUE),\n            Sport = Sport[which.max(Height)]) |&gt;\n  group_by(Sport) |&gt;\n  summarise(nb = n()) |&gt;\n  arrange(desc(nb)) |&gt; \n  kable()\n\n\n\n\n\nSport\nnb\n\n\n\n\nBasketball\n9\n\n\nAthletics\n5\n\n\nFencing\n4\n\n\nBobsleigh\n3\n\n\nVolleyball\n3\n\n\nLuge\n2\n\n\nDiving\n1\n\n\nIce Hockey\n1\n\n\nSwimming\n1\n\n\n\n\n\n\n\n\nVous disposez du texte suivant : Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde entier à Paris.\nEn utilisant les fonctions du packages stringr, extrayez les dates des différentes éditions des JO. Aide : définissez une expression régulière capable de capturer une séquence de caractères représentant une date telle que “26 Juillet 2024”.\n\n\nCode\ntexte &lt;-\n  \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois\nde Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016,\nceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du\n26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde\nentier à Paris.\"\n\ndates_JO &lt;- str_extract_all(texte, \"\\\\d+ \\\\w+ \\\\d+\") |&gt; unlist()\n\n\n\n\n\nRemplacez les noms des mois par leur numéro pour rendre ces éléments convertibles en date.\n\n\nCode\ndates_JO[c(1, 2, 4, 6)] &lt;-\n  str_replace(dates_JO[c(1, 2, 4, 6)], \"Août\", \"08\")\ndates_JO[c(3, 5)] &lt;- str_replace(dates_JO[c(3, 5)], \"Juillet\", \"07\")\n\ndates_JO\n\n\n[1] \"5 08 2016\"  \"20 08 2016\" \"23 07 2021\" \"8 08 2021\"  \"26 07 2024\"\n[6] \"11 08 2024\"\n\n\n\n\n\nConvertissez ces 3 éléments en date en utilisant la fonction appropriée du package lubridate.\n\n\nCode\nDebut_2016 &lt;- dmy(dates_JO[1]) \nFin_2016 &lt;- dmy(dates_JO[2]) \n\nDebut_2021 &lt;- dmy(dates_JO[3]) \nFin_2021 &lt;- dmy(dates_JO[4]) \n\nDebut_2024 &lt;- dmy(dates_JO[5])\nFin_2024 &lt;- dmy(dates_JO[6])\n\n\n\nDebut_2016\n\n[1] \"2016-08-05\"\n\nFin_2016\n\n[1] \"2016-08-20\"\n\nDebut_2021\n\n[1] \"2021-07-23\"\n\nFin_2021\n\n[1] \"2021-08-08\"\n\nDebut_2024 \n\n[1] \"2024-07-26\"\n\nFin_2024\n\n[1] \"2024-08-11\"\n\n\n\n\n\nCombien de jours ont séparés les éditions de Rio et Tokyo ?\n\n\nCode\nRio_Tokyo_d &lt;- interval(Fin_2016, Debut_2021) |&gt;\n  as.numeric(\"days\") |&gt;\n  print()\n\n\n[1] 1798\n\n\nEt sépareront les éditions de Tokyo et de Paris ?\n\n\nCode\nTokyo_Paris_d &lt;- interval(Fin_2021, Debut_2024) |&gt;\n  as.numeric(\"days\") |&gt;\n  print()\n\n\n[1] 1083\n\n\nFaites le même calcul en semaines.\nRio et Tokyo :\n\n\nCode\nRio_Tokyo_s &lt;- interval(Fin_2016, Debut_2021) |&gt;\n  as.numeric(\"weeks\") |&gt;\n  round(0) |&gt; \n  print()\n\n\n[1] 257\n\n\nTokyo et Paris :\n\n\nCode\nTokyo_Paris_s &lt;- interval(Fin_2021, Debut_2024) |&gt;\n  as.numeric(\"weeks\") |&gt;\n  round(0) |&gt; \n  print()\n\n\n[1] 155\n\n\n\n\n\nSuppression des tables ajoutées à la base de données et déconnexion\n\n\nCode\ndbRemoveTable(con, \"tokyo_athletes\")\ndbRemoveTable(con, \"olympics_athletes\")\ndbDisconnect(con)"
  },
  {
    "objectID": "posts/Exercices_Semaine_3/index.html#exercices---semaine-3",
    "href": "posts/Exercices_Semaine_3/index.html#exercices---semaine-3",
    "title": "Exercices - Semaine 3",
    "section": "",
    "text": "Dans ce post vous trouverez la troisième série d’exercices sur R. Celle-ci est réalisée à partir d’une base de données SQL et de 2 fichiers comprenant des informations sur les athlètes olympiques.\n\n\n\n\nCode\nlibrary(stringr)\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(arrow)\nlibrary(jsonlite)\nlibrary(RSQLite)\nlibrary(knitr)\n\n\n\n\n\nListez les fichiers présents dans le dossier data. Quelles sont les extensions des différents fichiers ?\n\n\nCode\nlist.files(\"data/\")\n\n\n[1] \"data.sqlite\"            \"olympics_athletes.json\" \"tokyo_athletes.parquet\"\n\n\nLes extensions des fichiers sont : .sqlite, .json et .parquet.\n\n\n\nLisez le fichier .parquet en utilisant la librairie arrow.\n\n\nCode\ntokyo_athletes &lt;- arrow::read_parquet(\"data/tokyo_athletes.parquet\")\n\n\nQuelles sont les dimensions de la table ? (lignes, colonnes)\n\n\nCode\ndim(tokyo_athletes)\n\n\n[1] 11085     3\n\n\nQuelles sont les colonnes présentes ?\n\n\nCode\ncolnames(tokyo_athletes)\n\n\n[1] \"Name\"       \"NOC\"        \"Discipline\"\n\n\n\n\n\nLisez le fichier .json en utilisant la librairie jsonlite.\n\n\nCode\nolympics_athletes &lt;-\n  read_json(\"data/olympics_athletes.json\", simplifyVector = T)\n\n\nQuelles sont les dimensions de la table ? (lignes, colonnes)\n\n\nCode\ndim(olympics_athletes)\n\n\n[1] 269731     13\n\n\nQuelles sont les colonnes présentes ?\n\n\nCode\ncolnames(olympics_athletes)\n\n\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n\n\n\n\n\nImportez la librairie RSQLite, et ouvrez une connexion à la base de données sqlite en utilisant la fonction dbConnect.\n\n\nCode\ncon &lt;- dbConnect(RSQLite::SQLite(), dbname = \"data/data.sqlite\")\n\n\nQuelles sont les tables présentes dans la table ?\n\n\nCode\ndbListTables(con)\n\n\n[1] \"tokyo_medals\" \"tokyo_teams\" \n\n\n\n\n\nCréez deux nouvelles tables dans la base de données à l’aide de la fonction dbWriteTable. Les tables s’appeleront respectivement olympics_athletes et tokyo_athletes pour les fichiers olympics_athletes.json et tokyo_athletes.parquet.\n\n\nCode\ndbWriteTable(con, \"tokyo_athletes\", tokyo_athletes)\ndbWriteTable(con, \"olympics_athletes\", olympics_athletes)\ndbListTables(con)\n\n\n[1] \"olympics_athletes\" \"tokyo_athletes\"    \"tokyo_medals\"     \n[4] \"tokyo_teams\"      \n\n\nDésormais 4 tables sont présentes dans la base de données.\n\n\n\nInspectez la table olympics_athletes en utilisant la fonction dbListFields. Quelles sont les colonnes de la table ?\n\n\nCode\ndbListFields(con, \"olympics_athletes\")\n\n\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n\n\n\n\n\nImportez cette table depuis la base de données en utilisant la fonction dbReadTable. Convertissez la table en tibble en utilisant la fonction as_tibble.\n\n\nCode\nolympics_athletes &lt;-\n  dbReadTable(con, \"olympics_athletes\") |&gt; as_tibble()\n\n\n\n\n\nConvertissez la colonne Sex en variable catégorielle avec la fonction mutate.\n\n\nCode\nolympics_athletes &lt;- olympics_athletes |&gt;\n  mutate(Sex = recode(Sex, \"F\" = \"Femme\", \"M\" = \"Homme\"))\n\nstr(olympics_athletes$Sex)\n\n\n chr [1:269731] \"Homme\" \"Homme\" \"Homme\" \"Homme\" \"Femme\" \"Femme\" \"Femme\" ...\n\n\n\n\n\nCréez deux colonnes à partir de la colonne Games. La première colonne Year sera une colonne de type integer contenant l’année des jeux. La deuxième colonne isSummer sera une colonne booléenne qui indiquera si les jeux sont des jeux d’été ou d’hiver.\n\n\nCode\nolympics_athletes &lt;- olympics_athletes |&gt;\n  separate_wider_delim (Games, delim = \" \", names = c(\"Year\", \"isSummer\"))\n\nstr(olympics_athletes$Year)\n\n\n chr [1:269731] \"1992\" \"2012\" \"1920\" \"1900\" \"1988\" \"1988\" \"1992\" \"1992\" ...\n\n\nCode\nstr(olympics_athletes$isSummer)\n\n\n chr [1:269731] \"Summer\" \"Summer\" \"Summer\" \"Summer\" \"Winter\" \"Winter\" ...\n\n\n\n\n\nCalculez la moyenne d’age des athletes pour chacune des éditions des JO d’été. Quelle édition a compté les athlètes les plus jeunes ?\n\n\nCode\nolympics_athletes |&gt; group_by(Year) |&gt;\n  summarise(moyenne_age = mean(Age, na.rm = TRUE)) |&gt;\n  arrange(moyenne_age) |&gt;\n  mutate(moyenne_age = round(moyenne_age)) |&gt; \n  head(n = 1) |&gt; \n  kable()\n\n\n\n\n\nYear\nmoyenne_age\n\n\n\n\n1896\n24\n\n\n\n\n\nLes plus vieux ?\n\n\nCode\nolympics_athletes |&gt; group_by(Year) |&gt;\n  summarise(moyenne_age = mean(Age, na.rm = TRUE)) |&gt;\n  arrange(desc(moyenne_age)) |&gt;\n  mutate(moyenne_age = round(moyenne_age)) |&gt; \n  head(n = 1) |&gt; \n  kable()\n\n\n\n\n\nYear\nmoyenne_age\n\n\n\n\n1932\n30\n\n\n\n\n\n\n\n\nQuelle est la discipline des JO d’été dont la taille des athlètes féminines est la plus grande ? (en cm)\n\n\nCode\nolympics_athletes |&gt; filter(Sex == \"Femme\", Height &gt;= 0) |&gt;\n  group_by(Sport) |&gt;\n  summarise(max_taille = max(Height, na.rm = TRUE)) |&gt;\n  arrange (desc(max_taille)) |&gt;\n  head(n = 1) |&gt; \n  kable()\n\n\n\n\n\nSport\nmax_taille\n\n\n\n\nBasketball\n213\n\n\n\n\n\nQuelle a été cette discipline au cours de chacune des éditions ?\n\n\nCode\nolympics_athletes |&gt;  filter(Sex == \"Femme\", Height &gt;= 0) |&gt;\n  group_by(Year) |&gt;\n  summarise(max_taille = max(Height, na.rm = TRUE),\n            Sport = Sport[which.max(Height)]) |&gt;\n  arrange(desc(Year)) |&gt; \n  kable()\n\n\n\n\n\nYear\nmax_taille\nSport\n\n\n\n\n2016\n203\nBasketball\n\n\n2014\n186\nIce Hockey\n\n\n2012\n206\nBasketball\n\n\n2010\n194\nBobsleigh\n\n\n2008\n202\nVolleyball\n\n\n2006\n187\nBobsleigh\n\n\n2004\n202\nVolleyball\n\n\n2002\n187\nBobsleigh\n\n\n2000\n213\nBasketball\n\n\n1998\n187\nLuge\n\n\n1996\n204\nBasketball\n\n\n1994\n187\nLuge\n\n\n1992\n204\nBasketball\n\n\n1988\n204\nBasketball\n\n\n1984\n205\nBasketball\n\n\n1980\n210\nBasketball\n\n\n1976\n210\nBasketball\n\n\n1972\n190\nAthletics\n\n\n1968\n188\nAthletics\n\n\n1964\n188\nVolleyball\n\n\n1960\n186\nSwimming\n\n\n1956\n185\nAthletics\n\n\n1952\n188\nAthletics\n\n\n1948\n180\nAthletics\n\n\n1936\n183\nFencing\n\n\n1932\n183\nFencing\n\n\n1928\n183\nFencing\n\n\n1924\n175\nFencing\n\n\n1920\n175\nDiving\n\n\n\n\n\nCalculez le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes\n\n\nCode\nolympics_athletes |&gt;  filter(Sex == \"Femme\", Height &gt;= 0) |&gt;\n  group_by(Year) |&gt;\n  summarise(max_taille = max(Height, na.rm = TRUE),\n            Sport = Sport[which.max(Height)]) |&gt;\n  group_by(Sport) |&gt;\n  summarise(nb = n()) |&gt;\n  arrange(desc(nb)) |&gt; \n  kable()\n\n\n\n\n\nSport\nnb\n\n\n\n\nBasketball\n9\n\n\nAthletics\n5\n\n\nFencing\n4\n\n\nBobsleigh\n3\n\n\nVolleyball\n3\n\n\nLuge\n2\n\n\nDiving\n1\n\n\nIce Hockey\n1\n\n\nSwimming\n1\n\n\n\n\n\n\n\n\nVous disposez du texte suivant : Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016, ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du 26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde entier à Paris.\nEn utilisant les fonctions du packages stringr, extrayez les dates des différentes éditions des JO. Aide : définissez une expression régulière capable de capturer une séquence de caractères représentant une date telle que “26 Juillet 2024”.\n\n\nCode\ntexte &lt;-\n  \"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois\nde Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016,\nceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du\n26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde\nentier à Paris.\"\n\ndates_JO &lt;- str_extract_all(texte, \"\\\\d+ \\\\w+ \\\\d+\") |&gt; unlist()\n\n\n\n\n\nRemplacez les noms des mois par leur numéro pour rendre ces éléments convertibles en date.\n\n\nCode\ndates_JO[c(1, 2, 4, 6)] &lt;-\n  str_replace(dates_JO[c(1, 2, 4, 6)], \"Août\", \"08\")\ndates_JO[c(3, 5)] &lt;- str_replace(dates_JO[c(3, 5)], \"Juillet\", \"07\")\n\ndates_JO\n\n\n[1] \"5 08 2016\"  \"20 08 2016\" \"23 07 2021\" \"8 08 2021\"  \"26 07 2024\"\n[6] \"11 08 2024\"\n\n\n\n\n\nConvertissez ces 3 éléments en date en utilisant la fonction appropriée du package lubridate.\n\n\nCode\nDebut_2016 &lt;- dmy(dates_JO[1]) \nFin_2016 &lt;- dmy(dates_JO[2]) \n\nDebut_2021 &lt;- dmy(dates_JO[3]) \nFin_2021 &lt;- dmy(dates_JO[4]) \n\nDebut_2024 &lt;- dmy(dates_JO[5])\nFin_2024 &lt;- dmy(dates_JO[6])\n\n\n\nDebut_2016\n\n[1] \"2016-08-05\"\n\nFin_2016\n\n[1] \"2016-08-20\"\n\nDebut_2021\n\n[1] \"2021-07-23\"\n\nFin_2021\n\n[1] \"2021-08-08\"\n\nDebut_2024 \n\n[1] \"2024-07-26\"\n\nFin_2024\n\n[1] \"2024-08-11\"\n\n\n\n\n\nCombien de jours ont séparés les éditions de Rio et Tokyo ?\n\n\nCode\nRio_Tokyo_d &lt;- interval(Fin_2016, Debut_2021) |&gt;\n  as.numeric(\"days\") |&gt;\n  print()\n\n\n[1] 1798\n\n\nEt sépareront les éditions de Tokyo et de Paris ?\n\n\nCode\nTokyo_Paris_d &lt;- interval(Fin_2021, Debut_2024) |&gt;\n  as.numeric(\"days\") |&gt;\n  print()\n\n\n[1] 1083\n\n\nFaites le même calcul en semaines.\nRio et Tokyo :\n\n\nCode\nRio_Tokyo_s &lt;- interval(Fin_2016, Debut_2021) |&gt;\n  as.numeric(\"weeks\") |&gt;\n  round(0) |&gt; \n  print()\n\n\n[1] 257\n\n\nTokyo et Paris :\n\n\nCode\nTokyo_Paris_s &lt;- interval(Fin_2021, Debut_2024) |&gt;\n  as.numeric(\"weeks\") |&gt;\n  round(0) |&gt; \n  print()\n\n\n[1] 155\n\n\n\n\n\nSuppression des tables ajoutées à la base de données et déconnexion\n\n\nCode\ndbRemoveTable(con, \"tokyo_athletes\")\ndbRemoveTable(con, \"olympics_athletes\")\ndbDisconnect(con)"
  },
  {
    "objectID": "index.html#les-posts",
    "href": "index.html#les-posts",
    "title": "Accueil",
    "section": "Les posts :",
    "text": "Les posts :"
  },
  {
    "objectID": "posts/Exercices_Semaine_4_Compléments/index.html",
    "href": "posts/Exercices_Semaine_4_Compléments/index.html",
    "title": "Exercices - Semaine 4 : Compléments",
    "section": "",
    "text": "Dans ce post, vous trouverez les compléments de réponses à la quatrième série d’exercices sur R aboutissant à la librairie olympicsWeather.\n\n\nDans une nouvelle session R, créer un nouveau projet de package intitulé olympicsWeather en utilisant la fonction create_package de la librairie usethis. Pourquoi n’est-il pas nécessaire d’installer explicitement usethis ?\nNous avons déjà installé devtools, or usethis est inclus dans ce package, il n’est donc pas nécessaire de l’installer explicitement.\n\n\n\nSans implémenter la fonction pour l’instant, écrivez une requête d’api. Nous souhaitons obtenir les informations de températures, de températures ressenties,de probabilité de précipitation, et de quantités de précipitations en mm, aux coordonnées géographiques c(48.85, 2.35).\n\n\nCode\nurl &lt;- \"https://api.open-meteo.com/v1/forecast\"\n\nhttr2::request(url) |&gt;\n  httr2::req_url_query(\n    latitude = 48.85,\n    longitude = 2.35,\n    hourly = c(\n      \"temperature_2m\",\n      \"apparent_temperature\",\n      \"precipitation_probability\",\n      \"precipitation\"\n    ),\n    .multi = \"comma\"\n  ) |&gt;\n  httr2::req_perform() |&gt;\n  httr2::resp_body_json() |&gt;\n  tibble::as.tibble() |&gt;\n  print()\n\n\n# A tibble: 5 × 9\n  latitude longitude generationtime_ms utc_offset_seconds timezone\n     &lt;dbl&gt;     &lt;dbl&gt;             &lt;dbl&gt;              &lt;int&gt; &lt;chr&gt;   \n1     48.8      2.36             0.196                  0 GMT     \n2     48.8      2.36             0.196                  0 GMT     \n3     48.8      2.36             0.196                  0 GMT     \n4     48.8      2.36             0.196                  0 GMT     \n5     48.8      2.36             0.196                  0 GMT     \n# ℹ 4 more variables: timezone_abbreviation &lt;chr&gt;, elevation &lt;dbl&gt;,\n#   hourly_units &lt;named list&gt;, hourly &lt;named list&gt;\n\n\n\n\n\nDécrivez le résultat. Qu’avons-nous obtenu suite à notre requête ? Quels paramètres souhaitons-nous changer si nous voulons pouvoir récupérer les prévisions météo pour tous les sites des JO ?\nCette requête nous a permis d’obtenir des prévisions météo sur 1 semaine : la température, la température ressentie, la probabilité qu’il pleuve, et la quantité de pluie, pour une latitude et une longitude donnée. Afin de pouvoir récupérer les prévisions météo pour tous les sites des JO, nous devons modifier les coordonnées gps renseignées."
  },
  {
    "objectID": "posts/Exercices_Semaine_4_Compléments/index.html#exercices---semaine-4-compléments",
    "href": "posts/Exercices_Semaine_4_Compléments/index.html#exercices---semaine-4-compléments",
    "title": "Exercices - Semaine 4 : Compléments",
    "section": "",
    "text": "Dans ce post, vous trouverez les compléments de réponses à la quatrième série d’exercices sur R aboutissant à la librairie olympicsWeather.\n\n\nDans une nouvelle session R, créer un nouveau projet de package intitulé olympicsWeather en utilisant la fonction create_package de la librairie usethis. Pourquoi n’est-il pas nécessaire d’installer explicitement usethis ?\nNous avons déjà installé devtools, or usethis est inclus dans ce package, il n’est donc pas nécessaire de l’installer explicitement.\n\n\n\nSans implémenter la fonction pour l’instant, écrivez une requête d’api. Nous souhaitons obtenir les informations de températures, de températures ressenties,de probabilité de précipitation, et de quantités de précipitations en mm, aux coordonnées géographiques c(48.85, 2.35).\n\n\nCode\nurl &lt;- \"https://api.open-meteo.com/v1/forecast\"\n\nhttr2::request(url) |&gt;\n  httr2::req_url_query(\n    latitude = 48.85,\n    longitude = 2.35,\n    hourly = c(\n      \"temperature_2m\",\n      \"apparent_temperature\",\n      \"precipitation_probability\",\n      \"precipitation\"\n    ),\n    .multi = \"comma\"\n  ) |&gt;\n  httr2::req_perform() |&gt;\n  httr2::resp_body_json() |&gt;\n  tibble::as.tibble() |&gt;\n  print()\n\n\n# A tibble: 5 × 9\n  latitude longitude generationtime_ms utc_offset_seconds timezone\n     &lt;dbl&gt;     &lt;dbl&gt;             &lt;dbl&gt;              &lt;int&gt; &lt;chr&gt;   \n1     48.8      2.36             0.196                  0 GMT     \n2     48.8      2.36             0.196                  0 GMT     \n3     48.8      2.36             0.196                  0 GMT     \n4     48.8      2.36             0.196                  0 GMT     \n5     48.8      2.36             0.196                  0 GMT     \n# ℹ 4 more variables: timezone_abbreviation &lt;chr&gt;, elevation &lt;dbl&gt;,\n#   hourly_units &lt;named list&gt;, hourly &lt;named list&gt;\n\n\n\n\n\nDécrivez le résultat. Qu’avons-nous obtenu suite à notre requête ? Quels paramètres souhaitons-nous changer si nous voulons pouvoir récupérer les prévisions météo pour tous les sites des JO ?\nCette requête nous a permis d’obtenir des prévisions météo sur 1 semaine : la température, la température ressentie, la probabilité qu’il pleuve, et la quantité de pluie, pour une latitude et une longitude donnée. Afin de pouvoir récupérer les prévisions météo pour tous les sites des JO, nous devons modifier les coordonnées gps renseignées."
  }
]